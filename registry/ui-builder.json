{
  "name": "UI Builder Components",
  "type": "registry:ui",
  "registryDependencies": [
    "accordion",
    "button",
    "calendar",
    "card",
    "checkbox",
    "command",
    "dialog",
    "form",
    "input",
    "label",
    "popover",
    "radio-group",
    "select",
    "separator",
    "switch",
    "tabs",
    "textarea",
    "tooltip",
    "toggle",
    "https://raw.githubusercontent.com/vantezzen/auto-form/main/registry/auto-form.json"
  ],
  "dependencies": [
    "react-hook-form",
    "zod",
    "zustand"
  ],
  "devDependencies": [],
  "tailwind": {
    "config": {}
  },
  "cssVars": {},
  "files": [
    {
      "path": "ui/ui-builder/props-panel.tsx",
      "target": "components/ui/ui-builder/props-panel.tsx",
      "content": "import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  useLayerStore,\n  componentRegistry,\n  Layer,\n  ComponentLayer,\n} from \"@/components/ui/ui-builder/store/layer-store\";\nimport { z } from \"zod\";\nimport {\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectContent,\n  SelectItem,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n} from \"@/components/ui/form\";\nimport { Button } from \"@/components/ui/button\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\n// import { Badge } from \"@/components/ui/badge\";\nimport {\n  PlusIcon,\n  TrashIcon,\n  X as XIcon,\n  ChevronsUpDown,\n  Check,\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface PropsPanelProps {\n  className?: string;\n}\n\nconst PropsPanel: React.FC<PropsPanelProps> = ({ className }) => {\n  const { selectedLayer } = useLayerStore();\n\n  return (\n    <div className={className}>\n      <h2 className=\"text-xl font-semibold mb-4\">\n        {selectedLayer?.type ?? \"Component\"} Properties\n      </h2>\n      {!selectedLayer && <p>No component selected</p>}\n      {selectedLayer && (\n        <DynamicPropsForm\n          key={selectedLayer.id}\n          selectedLayer={selectedLayer}\n        />\n      )}\n    </div>\n  );\n};\n\nconst DynamicPropsForm = ({\n  selectedLayer,\n}: {\n  selectedLayer: ComponentLayer;\n}) => {\n  console.log({ selectedLayer });\n  const {\n    updateLayerProps,\n    addComponentLayer,\n    addTextLayer,\n    removeLayer,\n    duplicateLayer,\n  } = useLayerStore();\n\n  const { schema } =\n    componentRegistry[selectedLayer.type as keyof typeof componentRegistry];\n\n  const form = useForm({\n    resolver: zodResolver(schema),\n    defaultValues: selectedLayer.props,\n  });\n\n  // Watch all fields\n  const watchedFields = form.watch();\n\n  // Update layer props on change\n  React.useEffect(() => {\n    const hasChanges = Object.keys(watchedFields).some(\n      (key) =>\n        JSON.stringify(watchedFields[key]) !==\n        JSON.stringify(selectedLayer.props[key])\n    );\n\n    if (hasChanges) {\n      updateLayerProps(selectedLayer.id, watchedFields);\n    }\n  }, [watchedFields, selectedLayer.id, selectedLayer.props, updateLayerProps]);\n\n  const handleAddComponentLayer = (\n    componentName: keyof typeof componentRegistry\n  ) => {\n    addComponentLayer(componentName, selectedLayer.id);\n  };\n\n  const handleAddTextLayer = (text: string) => {\n    addTextLayer(text, selectedLayer.id);\n  };\n\n  const getFieldType = (\n    field: z.ZodTypeAny\n  ): { fieldType: string; innerFieldType?: string } => {\n    if (field instanceof z.ZodOptional) {\n      return getFieldType(field._def.innerType);\n    }\n    if (field instanceof z.ZodDefault) {\n      return getFieldType(field._def.innerType);\n    }\n\n    if (field instanceof z.ZodArray) {\n      const innerType = getFieldType(field._def.type);\n      return { fieldType: \"ZodArray\", innerFieldType: innerType.fieldType };\n    }\n\n    if (field instanceof z.ZodObject) {\n      return { fieldType: \"ZodObject\" };\n    }\n\n    return { fieldType: field._def.typeName };\n  };\n\n  const getEnumValues = (field: z.ZodTypeAny): string[] => {\n    if (field instanceof z.ZodDefault) {\n      return getEnumValues(field._def.innerType);\n    }\n    return field instanceof z.ZodEnum ? field.options : [];\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n  };\n\n  const handleDeleteLayer = () => {\n    removeLayer(selectedLayer.id);\n  };\n\n  const handleDuplicateLayer = () => {\n    duplicateLayer(selectedLayer.id);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={handleSubmit}>\n        {Object.entries(schema.shape).map(([key, schemaField]) => {\n          const { fieldType, innerFieldType } = getFieldType(schemaField);\n          console.log({ fieldType, innerFieldType });\n          return (\n            <FormField\n              key={key}\n              control={form.control}\n              name={key}\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{key}</FormLabel>\n                  <FormControl>\n                    {fieldType === \"ZodArray\" && key === \"children\" ? (\n                      <ChildrenSearchableMultiSelect\n                        field={field}\n                        selectedLayer={selectedLayer}\n                        handleAddComponentLayer={handleAddComponentLayer}\n                        handleAddTextLayer={handleAddTextLayer}\n                        removeLayer={removeLayer}\n                      />\n                    ) : fieldType === \"ZodEnum\" ? (\n                      <Select\n                        onValueChange={field.onChange}\n                        value={field.value}\n                      >\n                        <SelectTrigger className=\"w-full\">\n                          <SelectValue placeholder={`Select ${key}`} />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {getEnumValues(schemaField).map((option: string) => (\n                            <SelectItem key={option} value={option}>\n                              {option}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    ) : fieldType === \"ZodBoolean\" ? (\n                      <input\n                        type=\"checkbox\"\n                        {...field}\n                        checked={field.value}\n                        className=\"p-2 border rounded\"\n                      />\n                    ) : fieldType === \"ZodObject\" ? (\n                      <JsonInput\n                        isArray={false}\n                        field={field}\n                        onChange={field.onChange}\n                      />\n                    ) : fieldType === \"ZodArray\" &&\n                      innerFieldType === \"ZodObject\" ? (\n                      <JsonInput\n                        isArray={true}\n                        field={field}\n                        onChange={field.onChange}\n                      />\n                    ) : fieldType === \"ZodArray\" ? (\n                      <Select\n                        onValueChange={field.onChange}\n                        value={field.value}\n                      >\n                        <SelectTrigger className=\"w-full\">\n                          <SelectValue placeholder=\"Select a component to add\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {Object.keys(componentRegistry).map((option) => (\n                            <SelectItem key={option} value={option}>\n                              {option}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    ) : (\n                      <input {...field} className=\"w-full p-2 border rounded\" />\n                    )}\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n          );\n        })}\n        <Button\n          type=\"button\"\n          variant=\"secondary\"\n          className=\"mt-4 w-full\"\n          onClick={handleDuplicateLayer}\n        >\n          Duplicate Component\n        </Button>\n        <Button\n          type=\"button\"\n          variant=\"destructive\"\n          className=\"mt-4 w-full\"\n          onClick={handleDeleteLayer}\n        >\n          Delete Component\n        </Button>\n      </form>\n    </Form>\n  );\n};\n\ninterface ChildrenInputProps {\n  field: any;\n  selectedLayer: ComponentLayer;\n  handleAddComponentLayer: (\n    componentName: keyof typeof componentRegistry\n  ) => void;\n  handleAddTextLayer: (text: string) => void;\n  removeLayer: (id: string) => void;\n}\n\ntype JsonValue =\n  | string\n  | number\n  | boolean\n  | null\n  | JsonValue[]\n  | { [key: string]: JsonValue };\n\nfunction JsonEditor({\n  value,\n  onChange,\n}: {\n  value: JsonValue;\n  onChange: (value: JsonValue) => void;\n}) {\n  const [currentKey, setCurrentKey] = useState(\"\");\n  const [currentValue, setCurrentValue] = useState(\"\");\n  const [editingKey, setEditingKey] = useState<string | null>(null);\n\n  const addKeyValue = () => {\n    if (currentKey && currentValue) {\n      onChange({\n        ...(value as Record<string, JsonValue>),\n        [currentKey]: currentValue,\n      });\n      setCurrentKey(\"\");\n      setCurrentValue(\"\");\n    }\n  };\n\n  const updateKeyValue = (key: string, newValue: string) => {\n    onChange({\n      ...(value as Record<string, JsonValue>),\n      [key]: newValue,\n    });\n    setEditingKey(null);\n  };\n\n  const removeKey = (key: string) => {\n    const newValue = { ...(value as Record<string, JsonValue>) };\n    delete newValue[key];\n    onChange(newValue);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex space-x-2\">\n        <Input\n          placeholder=\"Key\"\n          value={currentKey}\n          onChange={(e) => setCurrentKey(e.target.value)}\n        />\n        <Input\n          placeholder=\"Value\"\n          value={currentValue}\n          onChange={(e) => setCurrentValue(e.target.value)}\n        />\n        <Button onClick={addKeyValue}>Set</Button>\n      </div>\n\n      {Object.entries(value as Record<string, JsonValue>).map(([key, val]) => (\n        <div key={key} className=\"flex items-center space-x-2\">\n          <span className=\"font-semibold\">{key}:</span>\n          {editingKey === key ? (\n            <Input\n              value={String(val)}\n              onChange={(e) => updateKeyValue(key, e.target.value)}\n              onBlur={() => setEditingKey(null)}\n              autoFocus\n            />\n          ) : (\n            <span onClick={() => setEditingKey(key)} className=\"cursor-pointer\">\n              {JSON.stringify(val)}\n            </span>\n          )}\n          <Button\n            size=\"sm\"\n            variant=\"destructive\"\n            onClick={() => removeKey(key)}\n          >\n            <XIcon className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      ))}\n\n      <Textarea\n        readOnly\n        value={JSON.stringify(value, null, 2)}\n        rows={10}\n        className=\"font-mono\"\n      />\n    </div>\n  );\n}\n\nfunction ArrayJsonEditor({\n  value,\n  onChange,\n}: {\n  value: JsonValue[];\n  onChange: (value: JsonValue[]) => void;\n}) {\n  const addNewObject = () => {\n    onChange([...value, {}]);\n  };\n\n  const removeObject = (index: number) => {\n    onChange(value.filter((_, i) => i !== index));\n  };\n\n  const updateObject = (index: number, newValue: JsonValue) => {\n    onChange(value.map((item, i) => (i === index ? newValue : item)));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Button onClick={addNewObject}>Add New Object</Button>\n\n      {value.map((item, index) => (\n        <div key={index} className=\"border p-4 rounded-md\">\n          <div className=\"flex justify-between items-center mb-2\">\n            <h4 className=\"font-semibold\">Object {index + 1}</h4>\n            <Button\n              size=\"sm\"\n              variant=\"destructive\"\n              onClick={() => removeObject(index)}\n            >\n              <TrashIcon className=\"w-4 h-4 mr-2\" />\n              Remove\n            </Button>\n          </div>\n          <JsonEditor\n            value={item}\n            onChange={(newValue) => updateObject(index, newValue)}\n          />\n        </div>\n      ))}\n\n      <Textarea\n        readOnly\n        value={JSON.stringify(value, null, 2)}\n        rows={10}\n        className=\"font-mono\"\n      />\n    </div>\n  );\n}\n\nfunction JsonInput({\n  isArray,\n  field,\n  onChange,\n}: {\n  isArray: boolean;\n  field: any;\n  onChange: (value: JsonValue) => void;\n}) {\n  const [jsonData, setJsonData] = useState<JsonValue>(\n    isArray ? field?.value ?? [] : field?.value ?? {}\n  );\n\n  useEffect(() => {\n    onChange(jsonData);\n  }, [jsonData, onChange]);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center space-x-2\">\n        <Label htmlFor=\"array-mode\">\n          {isArray ? \"Array Mode\" : \"Object Mode\"}\n        </Label>\n      </div>\n\n      {isArray ? (\n        <ArrayJsonEditor\n          value={jsonData as JsonValue[]}\n          onChange={setJsonData}\n        />\n      ) : (\n        <JsonEditor value={jsonData} onChange={setJsonData} />\n      )}\n    </div>\n  );\n}\n\ninterface Option {\n  value: string;\n  label: string;\n}\n\nconst initialOptions: Option[] = [\n  { value: \"apple\", label: \"Apple\" },\n  { value: \"banana\", label: \"Banana\" },\n  { value: \"cherry\", label: \"Cherry\" },\n];\n\nfunction ChildrenSearchableMultiSelect({\n  field,\n  selectedLayer,\n  handleAddComponentLayer,\n  handleAddTextLayer,\n  removeLayer,\n}: ChildrenInputProps) {\n  const [open, setOpen] = React.useState(false);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [textInputValue, setTextInputValue] = React.useState(\"\");\n\n  const options = React.useMemo(() => {\n    const componentOptions = Object.keys(componentRegistry).map((name) => ({\n      value: name,\n      label: name,\n      type: \"component\",\n      from: componentRegistry[name as keyof typeof componentRegistry].from,\n    }));\n\n    const groupedOptions = componentOptions.reduce((acc, option) => {\n      const group = option.from || \"Other\";\n      if (!acc[group]) {\n        acc[group] = [];\n      }\n      acc[group].push(option);\n      return acc;\n    }, {} as Record<string, typeof componentOptions>);\n\n    return {\n      groupedOptions,\n      textOption: { value: \"text\", label: \"Add as Text\", type: \"text\" },\n    };\n  }, []);\n\n  const handleSelect = React.useCallback(\n    (currentValue: string) => {\n      if (currentValue === \"text\" && inputValue.trim()) {\n        handleAddTextLayer(inputValue.trim());\n        setInputValue(\"\");\n      } else {\n        // Check if the currentValue is a valid component name\n        if (componentRegistry[currentValue as keyof typeof componentRegistry]) {\n          handleAddComponentLayer(currentValue as keyof typeof componentRegistry);\n        }\n      }\n      setOpen(false);\n    },\n    [handleAddComponentLayer, handleAddTextLayer, inputValue]\n  );\n\n  const handleRemove = React.useCallback(\n    (childId: string) => {\n      removeLayer(childId);\n    },\n    [removeLayer]\n  );\n\n  const textInputForm = (\n    <form\n      className=\"w-full\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        handleAddTextLayer(textInputValue);\n        setTextInputValue(\"\");\n      }}\n    >\n      <div className=\"w-full flex items-center space-x-2\">\n        <Input\n          className=\"w-full flex-grow\"\n          placeholder=\"Enter text...\"\n          value={textInputValue}\n          onChange={(e) => setTextInputValue(e.target.value)}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              e.preventDefault();\n              handleAddTextLayer(textInputValue);\n              setTextInputValue(\"\");\n            }\n          }}\n        />\n        <Button type=\"submit\" variant=\"secondary\">\n          {\" \"}\n          <PlusIcon className=\"w-4 h-4\" />\n        </Button>\n      </div>\n    </form>\n  );\n\n  return (\n    <div className=\"w-full space-y-4\">\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button\n            variant=\"outline\"\n            role=\"combobox\"\n            aria-expanded={open}\n            className=\"w-full justify-between\"\n          >\n            Add Component or Text\n            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-[300px] p-0\">\n          <Command>\n            <CommandInput\n              placeholder=\"Add component or text...\"\n              value={inputValue}\n              onValueChange={setInputValue}\n            />\n            <CommandList>\n              <CommandEmpty>\n                No components found\n                {textInputForm}\n              </CommandEmpty>\n              <CommandGroup heading=\"Text\">\n                <CommandItem>{textInputForm}</CommandItem>\n              </CommandGroup>\n              <CommandSeparator />\n              {Object.entries(options.groupedOptions).map(\n                ([group, components]) => (\n                  <CommandGroup key={group} heading={group}>\n                    {components.map((component) => (\n                      <CommandItem\n                        key={component.value}\n                        onSelect={() => handleSelect(component.value)}\n                      >\n                        {component.label}\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                )\n              )}\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n\n      <div className=\"space-y-2\">\n        <span>Children: {selectedLayer.children?.length}</span>\n        {selectedLayer.children?.map((child, index) => (\n          <div\n            key={typeof child === \"string\" ? index : child.id}\n            className=\"flex items-center space-x-2\"\n          >\n            <span>{typeof child === \"string\" ? `\"${child}\"` : child.type}</span>\n            <Button\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={() =>\n                handleRemove(typeof child === \"string\" ? `${index}` : child.id)\n              }\n            >\n              <XIcon className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nPropsPanel.displayName = \"PropsPanel\";\n\nexport default PropsPanel;\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/ui-builder/preview-panel.tsx",
      "target": "components/ui/ui-builder/preview-panel.tsx",
      "content": "import React, {\n  ErrorInfo,\n  ReactNode,\n  Component as ReactComponent,\n  Suspense,\n} from \"react\";\nimport { PlusCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\n\nimport {\n  componentRegistry,\n  isTextLayer,\n  Layer,\n  useLayerStore,\n} from \"@/components/ui/ui-builder/store/layer-store\";\n\ninterface PreviewPanelProps {\n  className?: string;\n}\n\nconst PreviewPanel: React.FC<PreviewPanelProps> = ({ className }) => {\n  const { layers, selectLayer, addComponentLayer, selectedLayer } = useLayerStore();\n\n\n  const onAddElement = (componentName: keyof typeof componentRegistry) => {\n    addComponentLayer(componentName);\n  };\n\n  const onSelectElement = (layerId: string) => {\n    selectLayer(layerId);\n  };\n\n  const renderLayer = (layer: Layer) => {\n    if (isTextLayer(layer)) {\n      return <span key={layer.id}>{layer.text}</span>;\n    }\n\n    const { component: Component } =\n      componentRegistry[layer.type as keyof typeof componentRegistry];\n    if (!Component) return null;\n\n    const childProps = { ...layer.props };\n    if (layer.children && layer.children.length > 0) {\n      childProps.children = layer.children.map(renderLayer);\n    }\n\n    const isSelected = layer.id === selectedLayer?.id;\n\n    return (\n      <ErrorBoundary key={layer.id}>\n        <Suspense key={layer.id} fallback={<div>Loading...</div>}>\n          <Component\n            {...childProps}\n            className={`${isSelected ? 'ring-2 ring-blue-500 ring-offset-0' : ''} ${\n              childProps.className || \"\"\n            }`}\n            onClick={(e: React.MouseEvent) => {\n              e.stopPropagation();\n              onSelectElement(layer.id);\n            }}\n            onMouseDown={(e: React.MouseEvent) => {\n              if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {\n                e.preventDefault();\n              }\n            }}\n          >\n            {childProps.children}\n          </Component>\n        </Suspense>\n      </ErrorBoundary>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <h2 className=\"text-xl font-semibold mb-4\">Preview</h2>\n      \n      <div className=\"border p-4\">\n        {layers.map(renderLayer)}\n        <DividerControl\n          onComponentSelect={onAddElement}\n          availableComponents={\n            Object.keys(componentRegistry) as Array<\n              keyof typeof componentRegistry\n            >\n          }\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default PreviewPanel;\n\ntype DividerControlProps = {\n  onComponentSelect: (componentId: keyof typeof componentRegistry) => void;\n  availableComponents: Array<keyof typeof componentRegistry>;\n};\n\nfunction DividerControl({\n  onComponentSelect,\n  availableComponents = [],\n}: DividerControlProps) {\n  const [open, setOpen] = React.useState(false);\n\n  const handleComponentSelect = (\n    componentId: keyof typeof componentRegistry\n  ) => {\n    onComponentSelect(componentId);\n    setOpen(false);\n  };\n\n  return (\n    <div className=\"relative py-0\">\n      <div className=\"absolute inset-0 flex items-center\" aria-hidden=\"true\">\n        <div className=\"w-full border-t border-gray-300 border-dashed\" />\n      </div>\n      <div className=\"relative flex justify-center\">\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              className=\"group flex items-center rounded-full bg-white px-3 py-1.5 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 transition-all duration-200 ease-in-out\"\n            >\n              <PlusCircle className=\"h-5 w-5 text-gray-400\" />\n              <span className=\"sr-only\">Add component</span>\n              <span className=\"overflow-hidden max-w-0 group-hover:max-w-xs transition-all duration-200 ease-in-out group-hover:pl-2\">\n                Add component\n              </span>\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-[300px] p-0\" align=\"center\">\n            <Command>\n              <CommandInput placeholder=\"Search components...\" />\n              <CommandList>\n                <CommandEmpty>No components found.</CommandEmpty>\n                <CommandGroup>\n                  {availableComponents.map((component) => (\n                    <CommandItem\n                      key={component}\n                      onSelect={() => handleComponentSelect(component)}\n                    >\n                      {component}\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </CommandList>\n            </Command>\n          </PopoverContent>\n        </Popover>\n      </div>\n    </div>\n  );\n}\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n}\n\nclass ErrorBoundary extends ReactComponent<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"ErrorBoundary caught an error:\", error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      if (process.env.NODE_ENV === \"production\") {\n        return null;\n      }\n\n      return (\n        <div className=\"p-4 border border-red-500 bg-red-100 text-red-700 rounded\">\n          <h3 className=\"font-bold mb-2\">Component Error</h3>\n          <p>Error: {this.state.error?.message || \"Unknown error\"}</p>\n          <details className=\"mt-2\">\n            <summary className=\"cursor-pointer\">Stack trace</summary>\n            <pre className=\"mt-2 text-xs whitespace-pre-wrap\">\n              {this.state.error?.stack}\n            </pre>\n          </details>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/ui-builder/nav.tsx",
      "target": "components/ui/ui-builder/nav.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { ClipboardCopy } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Layer, useLayerStore, isTextLayer, componentRegistry } from \"./store/component-store\";\n\n\n\nexport function NavBar() {\n  const { layers } = useLayerStore();\n  console.log({ layers });\n\n  const generateLayerCode = (layer: Layer, indent = 0): string => {\n    if (isTextLayer(layer)) {\n      const indentation = \"  \".repeat(indent);\n      return `${indentation}${layer.text}`;\n    }\n\n    const { type, props, children } = layer;\n\n    let propsString = Object.entries(props)\n      .filter(([_, value]) => value !== undefined)\n      .map(([key, value]) => {\n        let propValue;\n        if (typeof value === 'string') {\n          propValue = `\"${value}\"`;\n        } else if (typeof value === 'number') {\n          propValue = value;\n        } else {\n          propValue = `{${JSON.stringify(value)}}`;\n        }\n        return `${key}=${propValue}`;\n      })\n      .join(\" \");\n\n    const indentation = \"  \".repeat(indent);\n\n    let childrenCode = \"\";\n    if (children && children.length > 0) {\n      childrenCode = children\n        .map((child) => generateLayerCode(child, indent + 1))\n        .join(\"\\n\");\n    }\n\n    if (childrenCode) {\n      return `${indentation}<${type} ${propsString}>\\n${childrenCode}\\n${indentation}</${type}>`;\n    } else {\n      return `${indentation}<${type} ${propsString} />`;\n    }\n  };\n\n  const generateComponentCode = () => {\n    const imports = new Set();\n\n    const collectImports = (layer: Layer) => {\n      if (!isTextLayer(layer)) {\n        const componentDefinition = componentRegistry[layer.type];\n        if (layer.type) {\n          imports.add(\n            `import { ${\n              layer.type\n            } } from \"${componentDefinition.from}\"`\n          );\n        }\n        if (layer.children) {\n          layer.children.forEach(collectImports);\n        }\n      }\n    };\n\n    layers.forEach(collectImports);\n\n    const code = layers.map((layer) => generateLayerCode(layer)).join(\"\\n\");\n    const importsString = Array.from(imports).join(\"\\n\");\n\n    return `${importsString}\\n\\n${code}`;\n  };\n\n  const codeBlocks = {\n    React: layers.map(generateComponentCode).join(\"\\n\"),\n    Serialized: JSON.stringify(\n      layers,\n      (key, value) => (typeof value === \"function\" ? undefined : value),\n      2\n    ),\n  };\n\n  return (\n    <div className=\"bg-background\">\n      <header className=\"flex items-center justify-between px-6 py-4 border-b\">\n        <h1 className=\"text-2xl font-bold\">UI Builder</h1>\n        <CodeDialog codeBlocks={codeBlocks} />\n      </header>\n    </div>\n  );\n}\n\nconst CodeDialog = ({\n  codeBlocks,\n}: {\n  codeBlocks: Record<\"React\" | \"Serialized\", string>;\n}) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text).then(() => {\n      alert(\"Copied to clipboard!\");\n    });\n  };\n  return (\n    <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n      <DialogTrigger asChild>\n        <Button>Save</Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[625px] max-h-[625px]\">\n        <DialogHeader>\n          <DialogTitle>Generated Code</DialogTitle>\n        </DialogHeader>\n        <Tabs defaultValue=\"react\" className=\"w-full overflow-hidden\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"React\">React</TabsTrigger>\n            <TabsTrigger value=\"Serialized\">Serialized</TabsTrigger>\n          </TabsList>\n          {Object.entries(codeBlocks).map(([lang, code]) => (\n            <TabsContent key={lang} value={lang} className=\"mt-4\">\n              <div className=\"relative\">\n                <div className=\"overflow-x-auto max-h-[400px] w-full\">\n                  <pre className=\"rounded-md bg-muted p-4 whitespace-pre inline-block min-w-full\">\n                    <code>{code}</code>\n                  </pre>\n                </div>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"absolute top-2 right-2 z-10\"\n                  onClick={() => copyToClipboard(code)}\n                >\n                  <ClipboardCopy className=\"w-4 h-4 mr-2\" />\n                  Copy\n                </Button>\n              </div>\n            </TabsContent>\n          ))}\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/ui-builder/layers-panel.tsx",
      "target": "components/ui/ui-builder/layers-panel.tsx",
      "content": "import React from \"react\";\nimport { Layer, useLayerStore, isTextLayer } from \"@/components/ui/ui-builder/store/layer-store\";\n\ninterface LayersPanelProps {\n  className?: string;\n}\n\nconst LayersPanel: React.FC<LayersPanelProps> = ({ className }) => {\n  const { layers, selectLayer, selectedLayer } = useLayerStore();\n\n  const isSelected = (layer: Layer): boolean => {\n    if (isTextLayer(layer)) return false;\n    return layer.id === selectedLayer?.id || \n           (layer.children && layer.children.some(isSelected)) || false;\n  };\n\n  const renderLayer = (layer: Layer, depth = 0) => {\n    if (isTextLayer(layer)) return null;\n\n    return (\n      <div key={layer.id} style={{ marginLeft: depth === 0 ? \"0px\" : \"20px\" }}>\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            selectLayer(layer.id);\n          }}\n          className={`text-left w-full p-1 rounded ${\n            isSelected(layer) ? 'bg-blue-200' : 'hover:bg-gray-100'\n          }`}\n        >\n          {layer.type}\n        </button>\n        {layer.children &&\n          layer.children.length > 0 &&\n          layer.children.map((child: Layer) => renderLayer(child, depth + 1))}\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <h2 className=\"text-xl font-semibold mb-4\">Component Tree</h2>\n      {layers.map((layer: Layer) => renderLayer(layer))}\n    </div>\n  );\n};\n\nexport default LayersPanel;",
      "type": "registry:ui"
    },
    {
      "path": "ui/ui-builder/component-editor.tsx",
      "target": "components/ui/ui-builder/component-editor.tsx",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport LayersPanel from \"./layers-panel\";\nimport PreviewPanel from \"./preview-panel\";\nimport PropsPanel from \"./props-panel\";\nimport { NavBar } from \"./nav\";\n\nconst ComponentEditor = () => {\n  return (\n    <div data-testid=\"component-editor\" className=\"flex flex-col w-full flex-grow h-full\">\n      <NavBar />\n      <div className=\"flex h-full overflow-hidden\">\n        <LayersPanel className=\"w-1/4 p-4 border-r overflow-y-auto\" />\n        <PreviewPanel className=\"w-1/2 p-4 overflow-y-auto\" />\n        <PropsPanel className=\"w-1/4 p-4 border-l overflow-y-auto\" />\n      </div>\n    </div>\n  );\n};\n\nexport default ComponentEditor;\n",
      "type": "registry:ui"
    },
    {
      "path": "ui/ui-builder/store/layer-store.ts",
      "target": "components/ui/ui-builder/store/layer-store.ts",
      "content": "import { ComponentType as ReactComponentType } from 'react';\nimport { create } from 'zustand';\nimport { z } from 'zod';\n// import { ComponentDefinitions } from '@/components/ui/generated-schemas';\nimport { customAlphabet } from \"nanoid\";\nimport { Button } from '../../button';\n\n\n// Component registry with Zod schemas or add manually like:\n// Button: {\n//   component: Button,\n//   schema: z.object({\n//     children: z.array(z.object({\n//       type: z.enum(['Button']),\n//       props: z.object({\n//         children: z.string(),\n//         variant: z.string(),\n//         size: z.string(),\n//         disabled: z.boolean(),\n//       }),\n//     })),\n//   }),\n//   from: '@/components/ui/button'\n// }\nconst componentRegistry = {\n    // ...ComponentDefinitions\n    Button: {\n  component: Button,\n  schema: z.object({\n    children: z.array(z.object({\n      type: z.enum(['Button']),\n      props: z.object({\n        children: z.string(),\n        variant: z.string(),\n        size: z.string(),\n        disabled: z.boolean(),\n      }),\n    })),\n  }),\n  from: '@/components/ui/button'\n}\n};\n\nexport function getDefaultProps(schema: z.ZodObject<any>) {\n  return Object.fromEntries(\n    Object.entries(schema.shape).map(([key, value]) => {\n      let type = 'string';\n      let options: string[] | undefined;\n      let defaultValue = (value as any)._def.defaultValue?.() ;\n\n      if (value instanceof z.ZodEnum) {\n        type = 'string';\n        options = value.options;\n      } else if (value instanceof z.ZodBoolean) {\n        type = 'boolean';\n      } else if (value instanceof z.ZodNumber) {\n        type = 'number';\n      } else if (value instanceof z.ZodArray) {\n        type = 'array';\n      } else if (value instanceof z.ZodUnion) {\n        type = 'mixed';\n        options = Object.keys(componentRegistry);\n      }\n\n      return [key, { type, options, defaultValue }];\n    })\n  )as Record<keyof typeof componentRegistry, { type: 'string' | 'boolean' | 'number' | 'array' | 'mixed', options?: string[], defaultValue: any }>;\n}\n\n// Update the CustomComponentType interface\nexport interface CustomComponentType<T = any> {\n  name: keyof typeof componentRegistry;\n  component: ReactComponentType<T>;\n  schema: z.ZodObject<any>;\n}\n\nexport type LayerType = keyof typeof componentRegistry | '_text_';\n\nexport type Layer = {\n  id: string;\n} & (\n  | {\n      type: keyof typeof componentRegistry;\n      props: Record<string, any>;\n      children?: Layer[];\n    }\n  | {\n      type: '_text_';\n      text: string;\n    }\n);\n\nexport type ComponentLayer = Exclude<Layer, { type: '_text_'; text: string }>;\n\ninterface ComponentStore {\n  components: CustomComponentType[];\n  layers: Layer[];\n  addComponentLayer: (layerType: keyof typeof componentRegistry, parentId?: string) => void;\n  addTextLayer: (text: string, parentId?: string) => void;\n  duplicateLayer: (layerId: string) => void;\n  removeLayer: (layerId: string) => void;\n  updateLayerProps: (layerId: string, newProps: Record<string, any>) => void;\n  selectLayer: (layerId: string) => void;\n  selectedLayer: ComponentLayer | null;\n}\n\nexport const useLayerStore = create<ComponentStore>((set: any) => ({\n  components: Object.entries(componentRegistry).map(([name, { component, schema }]) => ({\n    name: name as keyof typeof componentRegistry,\n    component,\n    schema,\n  })),\n  layers: [],\n  selectedLayer: null,\n  addComponentLayer: (layerType: keyof typeof componentRegistry, parentId?: string) => set((state: ComponentStore) => {\n    const defaultProps = getDefaultProps(componentRegistry[layerType].schema);\n    const initialProps = Object.entries(defaultProps).reduce((acc, [key, propDef]) => {\n      if (key !== 'children') {\n        acc[key] = propDef.defaultValue;\n      }\n      return acc;\n    }, {} as Record<string, any>);\n    const newLayer: Layer = {\n      id: createId(),\n      type: layerType,\n      props: initialProps,\n      children: []\n    };\n\n    return addLayerToState(state, newLayer, parentId);\n  }),\n\n  addTextLayer: (text: string, parentId?: string) => set((state: ComponentStore) => {\n    const newLayer: Layer = {\n      id: createId(),\n      type: '_text_',\n      text\n    };\n\n    return addLayerToState(state, newLayer, parentId);\n  }),\n  duplicateLayer: (layerId: string) => set((state: ComponentStore) => {\n    const layerToDuplicate = findLayerRecursive(state.layers, layerId);\n    if (layerToDuplicate) {\n      const duplicateWithNewIds = (layer: Layer): Layer => {\n        const newLayer = { ...layer, id: createId() };\n        if (!isTextLayer(newLayer) && newLayer.children) {\n          newLayer.children = newLayer.children.map(duplicateWithNewIds);\n        }\n        return newLayer;\n      };\n  \n      const newLayer = duplicateWithNewIds(layerToDuplicate);\n      const parentLayer = findParentLayerRecursive(state.layers, layerId);\n      return addLayerToState(state, newLayer, parentLayer?.id);\n    }\n    return state;\n  }),\n  removeLayer: (layerId: string) => set((state: ComponentStore) => {\n    \n  \n    const updatedLayers = removeLayerRecursive(state.layers, layerId);\n    \n    // Find the parent of the removed layer\n  \n    const parentLayer = findParentLayerRecursive(updatedLayers, layerId);\n    \n    // Select the parent layer or null if the removed layer was a top-level layer\n    const updatedSelectedLayer = parentLayer && !isTextLayer(parentLayer) ? parentLayer : \n      (updatedLayers.length > 0 && !isTextLayer(updatedLayers[0]) ? updatedLayers[0] : null);\n  \n    return {\n      layers: updatedLayers,\n      selectedLayer: updatedSelectedLayer\n    };\n  }),\n  updateLayerProps: (layerId: string, newProps: Record<string, any>) => set((state: ComponentStore) => {\n    const updateLayerRecursive = (layers: Layer[]): Layer[] => {\n      return layers.map(layer => {\n        if (layer.id === layerId) {\n          if (isTextLayer(layer)) {\n            // For text layers, update the text property\n            return { ...layer, text: newProps.text || layer.text };\n          } else {\n            // For component layers, update the props\n            return { ...layer, props: { ...layer.props, ...newProps } };\n          }\n        }\n        if (!isTextLayer(layer) && layer.children) {\n          return { ...layer, children: updateLayerRecursive(layer.children) };\n        }\n        return layer;\n      });\n    };\n  \n    const updatedLayers = updateLayerRecursive(state.layers);\n    const updatedSelectedLayer = state.selectedLayer && state.selectedLayer.id === layerId && !isTextLayer(state.selectedLayer) ? \n      updateLayerRecursive([state.selectedLayer])[0] as ComponentLayer : \n      state.selectedLayer;\n  \n    return {\n      layers: updatedLayers,\n      selectedLayer: updatedSelectedLayer\n    };\n  }),\n  selectLayer: (layerId: string) => set((state: ComponentStore) => {\n    \n\n    const layer = findLayerRecursive(state.layers, layerId);\n    if (layer) {\n      return {\n        selectedLayer: layer,\n      };\n    }\n    return {};\n  }),\n}));\n\n function isTextLayer(layer: Layer): layer is Layer & { type: '_text_'; text: string } {\n  return layer.type === '_text_';\n}\n\nconst addLayerToState = (state: ComponentStore, newLayer: Layer, parentId?: string) => {\n  const addLayerRecursive = (layers: Layer[]): Layer[] => {\n    return layers.map(layer => {\n      if (layer.id === parentId) {\n        if (!isTextLayer(layer)) {\n          return { ...layer, children: [...(layer.children || []), newLayer] };\n        }\n        return layer; // Text layers can't have children\n      }\n      if (!isTextLayer(layer) && layer.children) {\n        return { ...layer, children: addLayerRecursive(layer.children) };\n      }\n      return layer;\n    });\n  };\n\n  const updatedLayers = parentId ? addLayerRecursive(state.layers) : [...state.layers, newLayer];\n  \n  // Only update selectedLayer if the new layer is not a text layer\n  const updatedSelectedLayer = !isTextLayer(newLayer) ? newLayer : state.selectedLayer;\n\n  return {\n    layers: updatedLayers,\n    selectedLayer: updatedSelectedLayer\n  };\n};\n\nconst findParentLayerRecursive = (layers: Layer[], layerId: string): Layer | null => {\n  for (const layer of layers) {\n    if (!isTextLayer(layer) && layer.children && layer.children.some(child => child.id === layerId)) {\n      return layer;\n    }\n    if (!isTextLayer(layer) && layer.children) {\n      const parent = findParentLayerRecursive(layer.children, layerId);\n      if (parent) return parent;\n    }\n  }\n  return null;\n};\n\nconst findLayerRecursive = (layers: Layer[], layerId: string): ComponentLayer | undefined => {\n  for (const layer of layers) {\n    if (layer.id === layerId && !isTextLayer(layer)) {\n      return layer;\n    }\n    if (!isTextLayer(layer) && layer.children) {\n      const foundInChildren = findLayerRecursive(layer.children, layerId);\n      if (foundInChildren) {\n        return foundInChildren;\n      }\n    }\n  }\n  return undefined;\n};\n\nconst removeLayerRecursive = (layers: Layer[], layerId: string): Layer[] => {\n  return layers.filter(layer => {\n    if (layer.id === layerId) {\n      return false;\n    }\n    if (!isTextLayer(layer) && layer.children) {\n      layer.children = removeLayerRecursive(layer.children, layerId);\n    }\n    return true;\n  });\n};\n\nexport const createId = customAlphabet(\n  '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n  7\n) // 7-character random string\n\nexport { componentRegistry, isTextLayer };",
      "type": "registry:ui"
    }
  ]
}