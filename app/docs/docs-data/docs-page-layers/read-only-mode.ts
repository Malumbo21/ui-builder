import { ComponentLayer } from "@/components/ui/ui-builder/types";

export const READ_ONLY_MODE_LAYER = {
    "id": "read-only-mode",
    "type": "div",
    "name": "Read Only Mode",
    "props": {
      "className": "h-full bg-background px-4 flex flex-col gap-6 min-h-screen",
      "data-group": "data-variables"
    },
    "children": [
      {
        "type": "span",
        "children": "Read Only Mode",
        "id": "read-only-mode-title",
        "name": "Text",
        "props": {
          "className": "text-4xl"
        }
      },
      {
        "id": "read-only-mode-intro",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "Control editing capabilities in UI Builder by restricting specific operations like variable editing, page creation, and page deletion. This enables read-only modes perfect for production environments, previews, and restricted editing scenarios."
      },
      {
        "id": "read-only-mode-content",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "## Controlling Edit Permissions\n\nUI Builder provides granular control over editing capabilities through specific props:\n\n```tsx\n<UIBuilder\n  allowVariableEditing={false}  // Disable variable CRUD operations\n  allowPagesCreation={false}    // Disable creating new pages\n  allowPagesDeletion={false}    // Disable deleting pages\n  componentRegistry={myComponentRegistry}\n/>\n```\n\n### Available Permission Controls\n\n| Prop | Default | Description |\n|------|---------|-------------|\n| `allowVariableEditing` | `true` | Controls variable add/edit/delete operations |\n| `allowPagesCreation` | `true` | Controls ability to create new pages |\n| `allowPagesDeletion` | `true` | Controls ability to delete existing pages |\n\n## Read-Only Variable Mode\n\n### Disabling Variable Editing\n\nWhen `allowVariableEditing={false}`, the Variables panel becomes read-only:\n\n```tsx\nfunction ReadOnlyVariablesExample() {\n  const systemVariables = [\n    {\n      id: 'company-name',\n      name: 'companyName',\n      type: 'string',\n      defaultValue: 'Acme Corp'\n    },\n    {\n      id: 'brand-color',\n      name: 'brandColor',\n      type: 'string',\n      defaultValue: '#3b82f6'\n    }\n  ];\n\n  return (\n    <UIBuilder\n      allowVariableEditing={false}  // Variables panel is read-only\n      initialVariables={systemVariables}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n### What's Disabled in Read-Only Variable Mode\n\n- ❌ **Add Variable** button is hidden\n- ❌ **Edit Variable** buttons are hidden on variable cards\n- ❌ **Delete Variable** buttons are hidden on variable cards\n- ✅ **Variable binding** still works in props panel\n- ✅ **Variable values** can still be overridden in LayerRenderer\n- ✅ **Immutable bindings** remain enforced\n\n## Read-Only Pages Mode\n\n### Restricting Page Operations\n\n```tsx\nfunction RestrictedPagesExample() {\n  const templatePages = [\n    {\n      id: 'home-template',\n      type: 'div',\n      name: 'Home Template',\n      props: { className: 'p-4' },\n      children: []\n    },\n    {\n      id: 'about-template',\n      type: 'div',\n      name: 'About Template',\n      props: { className: 'p-4' },\n      children: []\n    }\n  ];\n\n  return (\n    <UIBuilder\n      allowPagesCreation={false}   // Cannot add new pages\n      allowPagesDeletion={false}   // Cannot delete existing pages\n      initialLayers={templatePages}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n### Page Restriction Effects\n\nWith `allowPagesCreation={false}`:\n- ❌ **Add Page** functionality is disabled\n- ✅ **Page content editing** remains available\n- ✅ **Page switching** between existing pages works\n\nWith `allowPagesDeletion={false}`:\n- ❌ **Delete Page** buttons are hidden in props panel\n- ✅ **Page content editing** remains available\n- ✅ **Page duplication** may still work (creates duplicates, doesn't delete)\n\n## Complete Read-Only Mode\n\n### Fully Restricted Editor\n\nFor maximum restrictions, disable all editing capabilities:\n\n```tsx\nfunction FullyReadOnlyEditor() {\n  return (\n    <UIBuilder\n      allowVariableEditing={false}\n      allowPagesCreation={false}\n      allowPagesDeletion={false}\n      initialLayers={lockedPages}\n      initialVariables={systemVariables}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n### What Still Works in Full Read-Only Mode\n\n- ✅ **Component selection** and navigation\n- ✅ **Visual editing** of component properties\n- ✅ **Layer manipulation** (add, remove, reorder components)\n- ✅ **Variable binding** in props panel\n- ✅ **Theme configuration** in appearance panel\n- ✅ **Code generation** and export\n- ✅ **Undo/Redo** operations\n\n## Use Cases and Patterns\n\n### Production Preview Mode\n\n```tsx\nfunction ProductionPreview({ templateId }) {\n  const [template, setTemplate] = useState(null);\n  const [variables, setVariables] = useState([]);\n\n  useEffect(() => {\n    // Load template and variables from API\n    Promise.all([\n      fetch(`/api/templates/${templateId}`).then(r => r.json()),\n      fetch(`/api/templates/${templateId}/variables`).then(r => r.json())\n    ]).then(([templateData, variableData]) => {\n      setTemplate(templateData);\n      setVariables(variableData);\n    });\n  }, [templateId]);\n\n  if (!template) return <div>Loading...</div>;\n\n  return (\n    <div className=\"preview-container\">\n      <div className=\"preview-header\">\n        <h2>Template Preview</h2>\n        <p>Read-only mode - variables locked</p>\n      </div>\n      \n      <UIBuilder\n        allowVariableEditing={false}  // Lock variables\n        allowPagesCreation={false}    // Lock page structure\n        allowPagesDeletion={false}\n        initialLayers={template.pages}\n        initialVariables={variables}\n        componentRegistry={myComponentRegistry}\n      />\n    </div>\n  );\n}\n```\n\n### Role-Based Editing Restrictions\n\n```tsx\nfunction RoleBasedEditor({ user, template }) {\n  const canEditVariables = user.role === 'admin' || user.role === 'developer';\n  const canManagePages = user.role === 'admin';\n\n  return (\n    <UIBuilder\n      allowVariableEditing={canEditVariables}  // Only admins/devs can edit variables\n      allowPagesCreation={canManagePages}      // Only admins can create pages\n      allowPagesDeletion={canManagePages}      // Only admins can delete pages\n      initialLayers={template.pages}\n      initialVariables={template.variables}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n### Content Editor Mode\n\n```tsx\nfunction ContentEditorMode() {\n  // Content editors can modify component content but not structure\n  return (\n    <UIBuilder\n      allowVariableEditing={true}   // Can edit content variables\n      allowPagesCreation={false}    // Cannot change page structure\n      allowPagesDeletion={false}\n      initialLayers={contentTemplate}\n      initialVariables={contentVariables}\n      componentRegistry={contentComponentRegistry}\n    />\n  );\n}\n```\n\n### Environment-Based Restrictions\n\n```tsx\nfunction EnvironmentAwareEditor() {\n  const isProduction = process.env.NODE_ENV === 'production';\n  const isDevelopment = process.env.NODE_ENV === 'development';\n  \n  return (\n    <UIBuilder\n      allowVariableEditing={isDevelopment}  // Only in dev environment\n      allowPagesCreation={isDevelopment}\n      allowPagesDeletion={isDevelopment}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n## Rendering Without Editor\n\n### Using LayerRenderer for Display-Only\n\nFor pure display without any editing interface, use `LayerRenderer`:\n\n```tsx\nimport LayerRenderer from '@/components/ui/ui-builder/layer-renderer';\n\nfunction DisplayOnlyPage({ pageData, variables, userValues }) {\n  return (\n    <LayerRenderer\n      page={pageData}\n      componentRegistry={myComponentRegistry}\n      variables={variables}\n      variableValues={userValues}  // Runtime values\n    />\n  );\n}\n```\n\n### LayerRenderer vs. Restricted UIBuilder\n\n| Feature | LayerRenderer | Restricted UIBuilder |\n|---------|---------------|----------------------|\n| Bundle size | Smaller (no editor) | Larger (full editor) |\n| Performance | Faster (no editor overhead) | Slower (editor present) |\n| Editing UI | None | Present but restricted |\n| Variable binding | ✅ | ✅ |\n| Code generation | ❌ | ✅ |\n| Visual editing | ❌ | ✅ (limited) |\n\n## Programmatic Control\n\n### Dynamic Permission Updates\n\n```tsx\nfunction DynamicPermissionsEditor() {\n  const [permissions, setPermissions] = useState({\n    allowVariableEditing: false,\n    allowPagesCreation: false,\n    allowPagesDeletion: false\n  });\n\n  const enableEditMode = () => {\n    setPermissions({\n      allowVariableEditing: true,\n      allowPagesCreation: true,\n      allowPagesDeletion: true\n    });\n  };\n\n  const enableReadOnlyMode = () => {\n    setPermissions({\n      allowVariableEditing: false,\n      allowPagesCreation: false,\n      allowPagesDeletion: false\n    });\n  };\n\n  return (\n    <div>\n      <div className=\"controls\">\n        <button onClick={enableEditMode}>Enable Editing</button>\n        <button onClick={enableReadOnlyMode}>Read-Only Mode</button>\n      </div>\n      \n      <UIBuilder\n        {...permissions}\n        componentRegistry={myComponentRegistry}\n      />\n    </div>\n  );\n}\n```\n\n### Feature Flag Integration\n\n```tsx\nfunction FeatureFlagEditor({ featureFlags }) {\n  return (\n    <UIBuilder\n      allowVariableEditing={featureFlags.enableVariableEditing}\n      allowPagesCreation={featureFlags.enablePageCreation}\n      allowPagesDeletion={featureFlags.enablePageDeletion}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n## Security Considerations\n\n### Variable Security\n\n```tsx\n// Secure sensitive variables from editing\nconst secureVariables = [\n  {\n    id: 'api-key',\n    name: 'apiKey',\n    type: 'string',\n    defaultValue: 'sk_live_...'\n  },\n  {\n    id: 'user-permissions',\n    name: 'userPermissions',\n    type: 'string',\n    defaultValue: 'read-only'\n  }\n];\n\nfunction SecureEditor() {\n  return (\n    <UIBuilder\n      allowVariableEditing={false}  // Prevent tampering with secure variables\n      initialVariables={secureVariables}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n### Input Validation\n\n```tsx\nfunction ValidatedEditor({ initialData }) {\n  // Validate and sanitize data before passing to UI Builder\n  const sanitizedPages = sanitizePageData(initialData.pages);\n  const validatedVariables = validateVariables(initialData.variables);\n  \n  return (\n    <UIBuilder\n      allowVariableEditing={false}  // Prevent injection via variable editing\n      initialLayers={sanitizedPages}\n      initialVariables={validatedVariables}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n## Best Practices\n\n### Choosing the Right Restrictions\n\n- **Use `allowVariableEditing={false}`** for production deployments\n- **Use `allowPagesCreation={false}`** for content-only editing\n- **Use `allowPagesDeletion={false}`** to prevent accidental page loss\n- **Use `LayerRenderer`** for pure display without editing needs\n\n### User Experience Considerations\n\n- **Provide clear feedback** about restricted functionality\n- **Use role-based restrictions** rather than blanket restrictions\n- **Consider progressive permissions** (unlock features as users gain trust)\n- **Document restriction reasons** for transparency\n\n### Performance Optimization\n\n- **Use `LayerRenderer`** when editing isn't needed\n- **Minimize editor bundle** in production builds\n- **Cache restricted configurations** to avoid re-computation\n- **Consider server-side rendering** for display-only scenarios"
      }
    ]
  } as const satisfies ComponentLayer; 