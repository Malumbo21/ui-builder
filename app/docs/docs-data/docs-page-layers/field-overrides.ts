import { ComponentLayer } from "@/components/ui/ui-builder/types";

export const FIELD_OVERRIDES_LAYER = {
    "id": "field-overrides",
    "type": "div",
    "name": "Advanced Component Configuration",
    "props": {
      "className": "h-full bg-background px-4 flex flex-col gap-6 min-h-screen",
      "data-group": "component-system"
    },
    "children": [
      {
        "type": "span",
        "children": "Advanced Component Configuration",
        "id": "field-overrides-title",
        "name": "Text",
        "props": {
          "className": "text-4xl"
        }
      },
      {
        "id": "field-overrides-intro",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "Master advanced component configuration techniques including field overrides, default children, and variable bindings to create sophisticated, user-friendly editing experiences."
      },
      {
        "id": "field-overrides-content",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "## Field Overrides\n\nField overrides replace auto-generated form fields with specialized input controls, providing better user experiences for complex data types.\n\n### How Field Overrides Work\n\nField overrides are defined within component definitions using the `fieldOverrides` property:\n\n```tsx\nimport { z } from 'zod';\nimport { classNameFieldOverrides, childrenFieldOverrides } from '@/lib/ui-builder/registry/form-field-overrides';\n\nconst componentRegistry = {\n  MyComponent: {\n    component: MyComponent,\n    schema: z.object({\n      className: z.string().optional(),\n      children: z.any().optional(),\n      icon: z.string().default('home'),\n      color: z.string().default('#000000'),\n    }),\n    from: '@/components/ui/my-component',\n    fieldOverrides: {\n      className: (layer) => classNameFieldOverrides(layer), // Advanced Tailwind editor\n      children: (layer) => childrenFieldOverrides(layer),   // Component selector\n      icon: (layer) => iconNameFieldOverrides(layer),       // Icon picker\n      // color prop uses auto-generated form field\n    }\n  }\n};\n```\n\n### Built-in Field Overrides\n\n#### `classNameFieldOverrides(layer)`\nAdvanced Tailwind CSS class editor:\n- Auto-complete for Tailwind classes\n- Responsive breakpoint controls  \n- Visual class grouping\n- Theme-aware suggestions\n\n```tsx\nfieldOverrides: {\n  className: (layer) => classNameFieldOverrides(layer)\n}\n```\n\n#### `childrenFieldOverrides(layer)`\nSearchable component selector for child components:\n- Dropdown with available component types\n- Search and filter capabilities\n- Respects component hierarchy\n\n```tsx\nfieldOverrides: {\n  children: (layer) => childrenFieldOverrides(layer)\n}\n```\n\n#### `childrenAsTextareaFieldOverrides(layer)`\nSimple textarea for text content:\n- Multi-line text editing\n- Perfect for span, p, and text elements\n\n```tsx\nfieldOverrides: {\n  children: (layer) => childrenAsTextareaFieldOverrides(layer)\n}\n```\n\n#### `childrenAsTipTapFieldOverrides(layer)`\nRich text editor using TipTap:\n- WYSIWYG markdown editing\n- Formatting toolbar\n- Ideal for Markdown components\n\n```tsx\nfieldOverrides: {\n  children: (layer) => childrenAsTipTapFieldOverrides(layer)\n}\n```\n\n#### `iconNameFieldOverrides(layer)`\nIcon picker with visual preview:\n- Grid of available icons\n- Search functionality\n- Live icon preview\n\n```tsx\nfieldOverrides: {\n  iconName: (layer) => iconNameFieldOverrides(layer)\n}\n```\n\n#### `commonFieldOverrides()`\nConvenience function for standard className and children overrides:\n\n```tsx\nfieldOverrides: commonFieldOverrides()\n// Equivalent to:\n// fieldOverrides: {\n//   className: (layer) => classNameFieldOverrides(layer),\n//   children: (layer) => childrenFieldOverrides(layer)\n// }\n```\n\n### Creating Custom Field Overrides\n\nCreate specialized input controls for unique data types:\n\n```tsx\nimport { AutoFormInputComponentProps } from '@/components/ui/ui-builder/types';\nimport { FormItem, FormLabel, FormControl } from '@/components/ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\nconst customColorFieldOverride = (layer) => ({\n  fieldType: ({ label, field }: AutoFormInputComponentProps) => (\n    <FormItem>\n      <FormLabel>{label}</FormLabel>\n      <FormControl>\n        <div className=\"flex gap-2\">\n          <input\n            type=\"color\"\n            value={field.value}\n            onChange={(e) => field.onChange(e.target.value)}\n            className=\"w-12 h-8 rounded border\"\n          />\n          <input\n            type=\"text\"\n            value={field.value}\n            onChange={(e) => field.onChange(e.target.value)}\n            placeholder=\"#000000\"\n            className=\"flex-1 px-2 border rounded\"\n          />\n        </div>\n      </FormControl>\n    </FormItem>\n  )\n});\n\n// Use in component definition:\nfieldOverrides: {\n  brandColor: customColorFieldOverride,\n  className: (layer) => classNameFieldOverrides(layer)\n}\n```\n\n## Default Children\n\nConfigure default child components that appear when users add components to the canvas.\n\n### Simple Text Default Children\n\n```tsx\nspan: {\n  schema: z.object({\n    className: z.string().optional(),\n    children: z.any().optional(),\n  }),\n  fieldOverrides: commonFieldOverrides(),\n  defaultChildren: \"Default text content\"\n}\n```\n\n### Component Layer Default Children\n\nFor complex nested structures:\n\n```tsx\nButton: {\n  component: Button,\n  schema: z.object({\n    className: z.string().optional(),\n    children: z.any().optional(),\n    variant: z.enum(['default', 'destructive']).default('default'),\n  }),\n  from: '@/components/ui/button',\n  defaultChildren: [\n    {\n      id: \"button-text\",\n      type: \"span\",\n      name: \"Button Text\",\n      props: {},\n      children: \"Click me\",\n    }\n  ],\n  fieldOverrides: commonFieldOverrides()\n}\n```\n\n### Complex Nested Structures\n\n```tsx\nCard: {\n  component: Card,\n  schema: z.object({\n    className: z.string().optional(),\n    children: z.any().optional(),\n  }),\n  from: '@/components/ui/card',\n  defaultChildren: [\n    {\n      id: \"card-header\",\n      type: \"div\",\n      name: \"Header\",\n      props: { className: \"p-6 pb-0\" },\n      children: [\n        {\n          id: \"card-title\",\n          type: \"span\",\n          name: \"Title\",\n          props: { className: \"text-2xl font-semibold\" },\n          children: \"Card Title\"\n        }\n      ]\n    },\n    {\n      id: \"card-content\",\n      type: \"div\",\n      name: \"Content\",\n      props: { className: \"p-6\" },\n      children: [\n        {\n          id: \"card-text\",\n          type: \"span\",\n          name: \"Text\",\n          props: {},\n          children: \"Card content goes here.\"\n        }\n      ]\n    }\n  ],\n  fieldOverrides: commonFieldOverrides()\n}\n```\n\n## Default Variable Bindings\n\nAutomatically bind component properties to variables when components are added to the canvas.\n\n### Basic Variable Bindings\n\n```tsx\nUserProfile: {\n  component: UserProfile,\n  schema: z.object({\n    userId: z.string().default(''),\n    displayName: z.string().default('Anonymous'),\n    email: z.string().optional(),\n  }),\n  from: '@/components/ui/user-profile',\n  defaultVariableBindings: [\n    {\n      propName: 'userId',\n      variableId: 'current-user-id',\n      immutable: true // System data - cannot be unbound\n    },\n    {\n      propName: 'displayName',\n      variableId: 'current-user-name', \n      immutable: false // Can be customized\n    }\n  ]\n}\n```\n\n### Immutable Bindings for Brand Consistency\n\n```tsx\nBrandedButton: {\n  component: BrandedButton,\n  schema: z.object({\n    text: z.string().default('Click me'),\n    brandColor: z.string().default('#000000'),\n    companyName: z.string().default('Company'),\n  }),\n  from: '@/components/ui/branded-button',\n  defaultVariableBindings: [\n    {\n      propName: 'brandColor',\n      variableId: 'primary-brand-color',\n      immutable: true // Prevents breaking brand guidelines\n    },\n    {\n      propName: 'companyName',\n      variableId: 'company-name',\n      immutable: true // Consistent branding\n    }\n    // 'text' is not bound, allowing content customization\n  ]\n}\n```\n\n## Advanced Patterns\n\n### Conditional Field Overrides\n\n```tsx\nconst conditionalFieldOverride = (layer) => ({\n  isHidden: (currentValues) => currentValues.mode === 'simple',\n  fieldType: ({ label, field }) => (\n    <FormItem>\n      <FormLabel>{label}</FormLabel>\n      <FormControl>\n        <AdvancedEditor value={field.value} onChange={field.onChange} />\n      </FormControl>\n    </FormItem>\n  )\n});\n```\n\n### Dynamic Default Children\n\nWhile UI Builder doesn't support function-based default children, you can create multiple component variants:\n\n```tsx\nSimpleCard: {\n  // ... basic card with minimal default children\n},\nRichCard: {\n  // ... card with comprehensive default structure\n}\n```\n\n## Best Practices\n\n### Field Overrides\n- **Always override `className`** with `classNameFieldOverrides()` for consistent Tailwind editing\n- **Always override `children`** with appropriate children override based on content type\n- **Create specialized overrides** for domain-specific data types (colors, icons, etc.)\n- **Test thoroughly** to ensure overrides work as expected in the editor\n\n### Default Children\n- **Provide meaningful defaults** that demonstrate proper component usage\n- **Keep structures shallow** to avoid overwhelming new users\n- **Use unique IDs** to prevent conflicts when components are duplicated\n- **Include all dependencies** - ensure referenced component types are in your registry\n\n### Variable Bindings\n- **Use immutable bindings** for system data that shouldn't be modified\n- **Use immutable bindings** for brand consistency (colors, logos, names)\n- **Leave content unbound** so editors can customize text and messaging\n- **Group related variables** logically in your variable definitions\n\n### Performance\n- **Use `commonFieldOverrides()`** when you need standard className/children handling\n- **Memoize expensive field overrides** if they perform complex calculations\n- **Keep default children structures reasonable** to avoid slow initial renders"
      }
    ]
  } as const satisfies ComponentLayer; 