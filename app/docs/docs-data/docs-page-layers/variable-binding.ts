import { ComponentLayer } from "@/components/ui/ui-builder/types";

export const VARIABLE_BINDING_LAYER = {
    "id": "variable-binding",
    "type": "div",
    "name": "Variable Binding",
    "props": {
      "className": "h-full bg-background px-4 flex flex-col gap-6 min-h-screen",
      "data-group": "data-variables"
    },
    "children": [
      {
        "type": "span",
        "children": "Variable Binding",
        "id": "variable-binding-title",
        "name": "Text",
        "props": {
          "className": "text-4xl"
        }
      },
      {
        "id": "variable-binding-intro",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "Variable binding connects dynamic data to component properties, enabling interfaces that update automatically when variable values change. Learn how to bind variables through the UI and programmatically."
      },
      {
        "id": "variable-binding-content",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "## How Variable Binding Works\n\nVariable binding in UI Builder replaces static property values with dynamic references to variables. When a component renders, these references are resolved to actual values.\n\n### Binding Structure\n\nWhen bound, a component property stores a variable reference object:\n\n```tsx\n// Before binding - static value\nconst button = {\n  props: {\n    children: 'Click me',\n    disabled: false\n  }\n};\n\n// After binding - variable references\nconst button = {\n  props: {\n    children: { __variableRef: 'button-text-var' },\n    disabled: { __variableRef: 'is-loading-var' }\n  }\n};\n```\n\n## Binding Variables Through the UI\n\n### Step-by-Step Binding Process\n\n1. **Select a component** in the editor canvas\n2. **Open the Properties panel** (right sidebar)\n3. **Find the property** you want to bind\n4. **Click the link icon** (ðŸ”—) next to the property field\n5. **Choose a variable** from the dropdown menu\n6. **The property is now bound** and shows the variable info\n\n### Visual Indicators\n\nBound properties are visually distinct in the props panel:\n\n- **Link icon** indicates the property supports binding\n- **Variable card** shows when a property is bound\n- **Variable name and type** are displayed\n- **Current value** shows the variable's default/resolved value\n- **Unlink button** allows unbinding (if not immutable)\n- **Lock icon** indicates immutable bindings\n\n### Unbinding Variables\n\nTo remove a variable binding:\n\n1. **Select the component** with bound properties\n2. **Find the bound property** in the props panel\n3. **Click the unlink icon** (ðŸ”—â›Œ) next to the variable card\n4. **Property reverts** to its default schema value\n\n**Note:** Immutable bindings (marked with ðŸ”’) cannot be unbound through the UI.\n\n## Variable Resolution at Runtime\n\n### In LayerRenderer\n\nWhen rendering pages, variable references are resolved to actual values:\n\n```tsx\nimport LayerRenderer from '@/components/ui/ui-builder/layer-renderer';\n\n// Page with variable bindings\nconst pageWithBindings = {\n  id: 'welcome-page',\n  type: 'div',\n  props: { className: 'p-4' },\n  children: [\n    {\n      id: 'welcome-button',\n      type: 'Button',\n      props: {\n        children: { __variableRef: 'welcome-message' },\n        disabled: { __variableRef: 'is-loading' }\n      }\n    }\n  ]\n};\n\n// Variables definition\nconst variables = [\n  {\n    id: 'welcome-message',\n    name: 'welcomeMessage',\n    type: 'string',\n    defaultValue: 'Welcome!'\n  },\n  {\n    id: 'is-loading',\n    name: 'isLoading',\n    type: 'boolean',\n    defaultValue: false\n  }\n];\n\n// Runtime values override defaults\nconst variableValues = {\n  'welcome-message': 'Hello, Jane!',\n  'is-loading': true\n};\n\nfunction MyPage() {\n  return (\n    <LayerRenderer\n      page={pageWithBindings}\n      componentRegistry={myComponentRegistry}\n      variables={variables}\n      variableValues={variableValues}\n    />\n  );\n}\n\n// Renders as:\n// <Button disabled={true}>Hello, Jane!</Button>\n```\n\n### Resolution Process\n\n1. **Scan component props** for variable reference objects\n2. **Look up variable by ID** in the variables array\n3. **Use runtime value** from `variableValues` if provided\n4. **Fall back to default value** from variable definition\n5. **Replace reference** with resolved value\n6. **Pass resolved props** to React component\n\n## Automatic Variable Binding\n\n### Default Variable Bindings\n\nComponents can automatically bind to variables when added to the canvas:\n\n```tsx\nconst componentRegistry = {\n  UserCard: {\n    component: UserCard,\n    schema: z.object({\n      userId: z.string(),\n      displayName: z.string(),\n      avatarUrl: z.string().optional(),\n      isOnline: z.boolean().default(false)\n    }),\n    from: '@/components/ui/user-card',\n    defaultVariableBindings: [\n      {\n        propName: 'userId',\n        variableId: 'current-user-id',\n        immutable: true // Cannot be unbound\n      },\n      {\n        propName: 'displayName',\n        variableId: 'current-user-name',\n        immutable: false // Can be changed\n      },\n      {\n        propName: 'isOnline',\n        variableId: 'user-online-status',\n        immutable: true\n      }\n    ]\n  }\n};\n```\n\n### Immutable Bindings\n\nImmutable bindings provide several benefits:\n\n- **System consistency** - Critical data cannot be accidentally unbound\n- **Security** - User permissions and IDs remain locked\n- **Branding** - Company logos and colors stay consistent\n- **Template integrity** - Essential bindings are preserved\n\n```tsx\n// Example: Brand-consistent button component\nconst BrandButton = {\n  component: Button,\n  schema: z.object({\n    children: z.string(),\n    style: z.object({\n      backgroundColor: z.string(),\n      color: z.string()\n    }).optional()\n  }),\n  defaultVariableBindings: [\n    {\n      propName: 'style.backgroundColor',\n      variableId: 'brand-primary-color',\n      immutable: true // Locked to brand colors\n    },\n    {\n      propName: 'style.color',\n      variableId: 'brand-text-color',\n      immutable: true\n    }\n    // children prop is left unbound for flexibility\n  ]\n};\n```\n\n## Variable Binding in Code Generation\n\nWhen generating React code, variable bindings are converted to prop references:\n\n```tsx\n// Original component layer with bindings\nconst buttonLayer = {\n  type: 'Button',\n  props: {\n    children: { __variableRef: 'button-text' },\n    disabled: { __variableRef: 'is-disabled' },\n    variant: 'primary' // Static value\n  }\n};\n\n// Generated React code\ninterface PageProps {\n  variables: {\n    buttonText: string;\n    isDisabled: boolean;\n  };\n}\n\nconst Page = ({ variables }: PageProps) => {\n  return (\n    <Button \n      disabled={variables.isDisabled}\n      variant=\"primary\"\n    >\n      {variables.buttonText}\n    </Button>\n  );\n};\n```\n\n## Managing Variable Bindings Programmatically\n\n### Using Layer Store Methods\n\n```tsx\nimport { useLayerStore } from '@/lib/ui-builder/store/layer-store';\n\nfunction CustomBindingControl() {\n  const bindPropToVariable = useLayerStore((state) => state.bindPropToVariable);\n  const unbindPropFromVariable = useLayerStore((state) => state.unbindPropFromVariable);\n  const isBindingImmutable = useLayerStore((state) => state.isBindingImmutable);\n\n  const handleBind = () => {\n    // Bind a component's 'title' prop to a variable\n    bindPropToVariable('button-123', 'title', 'page-title-var');\n  };\n\n  const handleUnbind = () => {\n    // Check if binding is immutable first\n    if (!isBindingImmutable('button-123', 'title')) {\n      unbindPropFromVariable('button-123', 'title');\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={handleBind}>Bind Title</button>\n      <button onClick={handleUnbind}>Unbind Title</button>\n    </div>\n  );\n}\n```\n\n### Variable Reference Detection\n\n```tsx\nimport { isVariableReference } from '@/lib/ui-builder/utils/variable-resolver';\n\n// Check if a prop value is a variable reference\nconst propValue = layer.props.children;\n\nif (isVariableReference(propValue)) {\n  console.log('Bound to variable:', propValue.__variableRef);\n} else {\n  console.log('Static value:', propValue);\n}\n```\n\n## Advanced Binding Patterns\n\n### Conditional Property Binding\n\n```tsx\n// Use boolean variables to control component behavior\nconst variables = [\n  {\n    id: 'show-avatar',\n    name: 'showAvatar',\n    type: 'boolean',\n    defaultValue: true\n  },\n  {\n    id: 'user-role',\n    name: 'userRole',\n    type: 'string',\n    defaultValue: 'user'\n  }\n];\n\n// Bind to component properties\nconst userCard = {\n  type: 'UserCard',\n  props: {\n    showAvatar: { __variableRef: 'show-avatar' },\n    role: { __variableRef: 'user-role' }\n  }\n};\n```\n\n### Multi-Component Binding\n\n```tsx\n// Bind the same variable to multiple components\nconst themeVariable = {\n  id: 'current-theme',\n  name: 'currentTheme',\n  type: 'string',\n  defaultValue: 'light'\n};\n\n// Multiple components can reference the same variable\nconst header = {\n  type: 'Header',\n  props: {\n    theme: { __variableRef: 'current-theme' }\n  }\n};\n\nconst sidebar = {\n  type: 'Sidebar',\n  props: {\n    theme: { __variableRef: 'current-theme' }\n  }\n};\n\nconst footer = {\n  type: 'Footer',\n  props: {\n    theme: { __variableRef: 'current-theme' }\n  }\n};\n```\n\n## Variable Binding Best Practices\n\n### Design Patterns\n\n- **Use meaningful variable names** that clearly indicate their purpose\n- **Group related variables** (e.g., user data, theme settings, feature flags)\n- **Set appropriate default values** for better editor preview experience\n- **Document variable purposes** in component registry definitions\n- **Use immutable bindings** for system-critical or brand-related data\n\n### Performance Considerations\n\n- **Variable resolution is optimized** through memoization in the rendering process\n- **Only bound properties** are processed during variable resolution\n- **Static values** are passed through without processing overhead\n- **Variable updates** trigger efficient re-renders only for affected components\n\n### Debugging Tips\n\n```tsx\n// Check variable bindings in browser dev tools\nconst layer = useLayerStore.getState().findLayerById('my-component');\nconsole.log('Layer props:', layer?.props);\n\n// Verify variable resolution\nimport { resolveVariableReferences } from '@/lib/ui-builder/utils/variable-resolver';\n\nconst resolved = resolveVariableReferences(\n  layer.props,\n  variables,\n  variableValues\n);\nconsole.log('Resolved props:', resolved);\n```\n\n## Troubleshooting Common Issues\n\n### Variable Not Found\n\n- **Check variable ID** matches exactly in both definition and reference\n- **Verify variable exists** in the variables array\n- **Ensure variable scope** (editor vs. renderer) includes the needed variable\n\n### Binding Not Working\n\n- **Confirm variable reference format** uses `{ __variableRef: 'variable-id' }`\n- **Check variable type compatibility** with component prop expectations\n- **Verify component schema** allows the property to be bound\n\n### Immutable Binding Issues\n\n- **Check defaultVariableBindings** configuration in component registry\n- **Verify immutable flag** is set correctly for auto-bound properties\n- **Use layer store methods** to check binding immutability programmatically"
      }
    ]
  } as const satisfies ComponentLayer; 