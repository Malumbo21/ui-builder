import { ComponentLayer } from "@/components/ui/ui-builder/types";

export const EDITOR_PANEL_CONFIG_LAYER = {
    "id": "editor-panel-config",
    "type": "div",
    "name": "Editor Panel Config",
    "props": {
      "className": "h-full bg-background px-4 flex flex-col gap-6 min-h-screen",
      "data-group": "editor-features"
    },
    "children": [
      {
        "type": "span",
        "children": "Editor Panel Config",
        "id": "editor-panel-config-title",
        "name": "Text",
        "props": {
          "className": "text-4xl"
        }
      },
      {
        "id": "editor-panel-config-intro",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "Configure specific editor panels and components to create tailored editing experiences. Customize the navigation bar, editor panel functionality, and create branded, role-based interfaces."
      },
      {
        "id": "editor-panel-config-demo",
        "type": "div",
        "name": "div",
        "props": {},
        "children": [
          {
            "id": "editor-panel-config-badge",
            "type": "Badge",
            "name": "Badge",
            "props": {
              "variant": "default",
              "className": "rounded rounded-b-none"
            },
            "children": [
              {
                "id": "editor-panel-config-badge-text",
                "type": "span",
                "name": "span",
                "props": {},
                "children": "Custom Editor Interface"
              }
            ]
          },
          {
            "id": "editor-panel-config-demo-frame",
            "type": "div",
            "name": "div",
            "props": {
              "className": "border border-primary shadow-lg rounded-b-sm rounded-tr-sm overflow-hidden"
            },
            "children": [
              {
                "id": "editor-panel-config-iframe",
                "type": "iframe",
                "name": "iframe",
                "props": {
                  "src": "http://localhost:3000/examples/editor",
                  "title": "Editor Panel Config Demo",
                  "className": "aspect-square md:aspect-video w-full"
                },
                "children": []
              }
            ]
          }
        ]
      },
      {
        "id": "editor-panel-config-content",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "## Custom Navigation Bar\n\nReplace or customize the default navigation bar to match your brand and workflow:\n\n```tsx\nimport { useEditorStore } from '@/lib/ui-builder/store/editor-store';\nimport { useLayerStore } from '@/lib/ui-builder/store/layer-store';\nimport { Button } from '@/components/ui/button';\nimport { ThemeToggle } from '@/components/theme-toggle';\n\nconst CustomNavBar = () => {\n  const showLeftPanel = useEditorStore(state => state.showLeftPanel);\n  const toggleLeftPanel = useEditorStore(state => state.toggleLeftPanel);\n  const showRightPanel = useEditorStore(state => state.showRightPanel);\n  const toggleRightPanel = useEditorStore(state => state.toggleRightPanel);\n  \n  const pages = useLayerStore(state => state.pages);\n  const selectedPageId = useLayerStore(state => state.selectedPageId);\n  const currentPage = pages.find(p => p.id === selectedPageId);\n  \n  return (\n    <nav className=\"h-16 border-b bg-background flex items-center justify-between px-4\">\n      {/* Branding */}\n      <div className=\"flex items-center gap-3\">\n        <img src=\"/your-logo.svg\" alt=\"Your Brand\" className=\"h-8\" />\n        <div className=\"border-l pl-3\">\n          <span className=\"font-semibold text-sm\">Page Builder</span>\n          {currentPage && (\n            <p className=\"text-xs text-muted-foreground\">\n              Editing: {currentPage.name}\n            </p>\n          )}\n        </div>\n      </div>\n      \n      {/* Editor Controls */}\n      <div className=\"flex items-center gap-2\">\n        <Button \n          variant=\"ghost\" \n          size=\"sm\"\n          onClick={toggleLeftPanel}\n          className=\"hidden md:flex\"\n        >\n          {showLeftPanel ? 'Hide' : 'Show'} Layers\n        </Button>\n        \n        <Button \n          variant=\"ghost\" \n          size=\"sm\"\n          onClick={toggleRightPanel}\n          className=\"hidden md:flex\"\n        >\n          {showRightPanel ? 'Hide' : 'Show'} Properties\n        </Button>\n        \n        <div className=\"border-l pl-2 ml-2 flex items-center gap-2\">\n          <Button variant=\"default\" size=\"sm\">\n            Save Layout\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            Preview\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            Export\n          </Button>\n        </div>\n      </div>\n      \n      {/* User & Settings */}\n      <div className=\"flex items-center gap-2\">\n        <ThemeToggle />\n        <UserDropdown />\n      </div>\n    </nav>\n  );\n};\n\n<UIBuilder\n  componentRegistry={componentRegistry}\n  panelConfig={{\n    navBar: <CustomNavBar />\n  }}\n/>\n```\n\n## Branded Navigation\n\nCreate a fully branded navigation experience:\n\n```tsx\nconst BrandedNavBar = () => {\n  const hasUnsavedChanges = useLayerStore(state => state.hasUnsavedChanges);\n  const saveLayout = async () => {\n    // Your save logic\n    const pages = useLayerStore.getState().pages;\n    await saveToYourBackend(pages);\n  };\n  \n  return (\n    <nav className=\"h-16 bg-gradient-to-r from-blue-600 to-purple-600 text-white flex items-center justify-between px-4\">\n      <div className=\"flex items-center gap-4\">\n        <YourBrandLogo className=\"h-8 w-auto\" />\n        <h1 className=\"text-lg font-bold\">Design Studio</h1>\n      </div>\n      \n      <div className=\"flex items-center gap-3\">\n        {hasUnsavedChanges && (\n          <div className=\"flex items-center gap-2 text-yellow-200\">\n            <div className=\"w-2 h-2 bg-yellow-400 rounded-full animate-pulse\" />\n            <span className=\"text-sm\">Unsaved changes</span>\n          </div>\n        )}\n        \n        <Button \n          onClick={saveLayout}\n          variant=\"secondary\"\n          size=\"sm\"\n          disabled={!hasUnsavedChanges}\n        >\n          Save\n        </Button>\n        \n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-white hover:bg-white/20\">\n              Menu\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent>\n            <DropdownMenuItem onClick={() => exportAsReact()}>\n              Export as React\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => exportAsJSON()}>\n              Export as JSON\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => openSettings()}>\n              Settings\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </nav>\n  );\n};\n```\n\n## Role-Based Navigation\n\nCustomize the navigation based on user permissions:\n\n```tsx\nconst RoleBasedNavBar = ({ user }) => {\n  const canPublish = user.role === 'admin' || user.role === 'editor';\n  const canDeletePages = user.role === 'admin';\n  \n  return (\n    <nav className=\"h-16 border-b bg-background flex items-center justify-between px-4\">\n      <div className=\"flex items-center gap-3\">\n        <CompanyLogo />\n        <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n          {user.role}\n        </Badge>\n      </div>\n      \n      <div className=\"flex items-center gap-2\">\n        {/* Always available */}\n        <Button variant=\"ghost\" size=\"sm\">\n          Save Draft\n        </Button>\n        \n        {/* Role-based actions */}\n        {canPublish && (\n          <Button variant=\"default\" size=\"sm\">\n            Publish\n          </Button>\n        )}\n        \n        {user.role === 'viewer' && (\n          <Button variant=\"outline\" size=\"sm\">\n            Request Changes\n          </Button>\n        )}\n        \n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\">\n              <MoreHorizontal className=\"w-4 h-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent>\n            <DropdownMenuItem>\n              Share Link\n            </DropdownMenuItem>\n            {canDeletePages && (\n              <DropdownMenuItem className=\"text-destructive\">\n                Delete Page\n              </DropdownMenuItem>\n            )}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </nav>\n  );\n};\n\n<UIBuilder\n  panelConfig={{\n    navBar: <RoleBasedNavBar user={currentUser} />\n  }}\n/>\n```\n\n## Custom Editor Panel\n\nEnhance the editor panel with additional tools and features:\n\n```tsx\nimport LayerRenderer from '@/components/ui/ui-builder/layer-renderer';\nimport { useLayerStore } from '@/lib/ui-builder/store/layer-store';\nimport { useEditorStore } from '@/lib/ui-builder/store/editor-store';\n\nconst EnhancedEditorPanel = ({ className }) => {\n  const selectedPageId = useLayerStore(state => state.selectedPageId);\n  const findLayerById = useLayerStore(state => state.findLayerById);\n  const componentRegistry = useEditorStore(state => state.registry);\n  const variables = useLayerStore(state => state.variables);\n  \n  const currentPage = findLayerById(selectedPageId);\n  const [zoom, setZoom] = useState(1);\n  const [deviceMode, setDeviceMode] = useState('desktop');\n  \n  const deviceSizes = {\n    mobile: { width: 375, height: 667 },\n    tablet: { width: 768, height: 1024 },\n    desktop: { width: '100%', height: '100%' }\n  };\n  \n  return (\n    <div className={cn('flex flex-col h-full', className)}>\n      {/* Enhanced Toolbar */}\n      <div className=\"border-b p-3 flex items-center justify-between bg-muted/30\">\n        <div className=\"flex items-center gap-2\">\n          {/* Device Selector */}\n          <ToggleGroup \n            type=\"single\" \n            value={deviceMode} \n            onValueChange={setDeviceMode}\n            className=\"border rounded\"\n          >\n            <ToggleGroupItem value=\"mobile\" size=\"sm\">\n              <Smartphone className=\"w-4 h-4\" />\n            </ToggleGroupItem>\n            <ToggleGroupItem value=\"tablet\" size=\"sm\">\n              <Tablet className=\"w-4 h-4\" />\n            </ToggleGroupItem>\n            <ToggleGroupItem value=\"desktop\" size=\"sm\">\n              <Monitor className=\"w-4 h-4\" />\n            </ToggleGroupItem>\n          </ToggleGroup>\n          \n          {/* Zoom Control */}\n          <div className=\"flex items-center gap-1 border rounded px-2\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => setZoom(Math.max(0.25, zoom - 0.25))}\n            >\n              <ZoomOut className=\"w-4 h-4\" />\n            </Button>\n            <span className=\"text-sm min-w-12 text-center\">\n              {Math.round(zoom * 100)}%\n            </span>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => setZoom(Math.min(2, zoom + 0.25))}\n            >\n              <ZoomIn className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          {/* Grid Toggle */}\n          <Button variant=\"ghost\" size=\"sm\">\n            <Grid className=\"w-4 h-4\" />\n          </Button>\n          \n          {/* Undo/Redo */}\n          <div className=\"flex border rounded\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <Undo className=\"w-4 h-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\">\n              <Redo className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Canvas Area */}\n      <div className=\"flex-1 p-4 bg-muted/10 overflow-auto\">\n        <div \n          className=\"mx-auto bg-white shadow-lg rounded-lg overflow-hidden\"\n          style={{\n            width: deviceSizes[deviceMode].width,\n            height: deviceSizes[deviceMode].height,\n            transform: `scale(${zoom})`,\n            transformOrigin: 'top center'\n          }}\n        >\n          {currentPage && (\n            <LayerRenderer\n              page={currentPage}\n              componentRegistry={componentRegistry}\n              variables={variables}\n              editorConfig={{ isEditor: true }}\n            />\n          )}\n        </div>\n      </div>\n      \n      {/* Status Bar */}\n      <div className=\"border-t px-4 py-2 bg-muted/30 text-sm text-muted-foreground flex justify-between\">\n        <span>\n          Page: {currentPage?.name || 'Untitled'}\n        </span>\n        <span>\n          {variables.length} variables • {deviceMode} view\n        </span>\n      </div>\n    </div>\n  );\n};\n\n<UIBuilder\n  panelConfig={{\n    editorPanel: <EnhancedEditorPanel />\n  }}\n/>\n```\n\n## Context-Aware Navigation\n\nMake the navigation respond to editor state:\n\n```tsx\nconst ContextAwareNavBar = () => {\n  const selectedLayerId = useLayerStore(state => state.selectedLayerId);\n  const findLayerById = useLayerStore(state => state.findLayerById);\n  const duplicateLayer = useLayerStore(state => state.duplicateLayer);\n  const removeLayer = useLayerStore(state => state.removeLayer);\n  \n  const selectedLayer = findLayerById(selectedLayerId);\n  const isComponentSelected = selectedLayer && selectedLayerId !== selectedPageId;\n  \n  return (\n    <nav className=\"h-16 border-b bg-background flex items-center justify-between px-4\">\n      <div className=\"flex items-center gap-4\">\n        <YourLogo />\n        \n        {/* Context-sensitive breadcrumbs */}\n        {selectedLayer && (\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <span>Page: {getCurrentPageName()}</span>\n            {isComponentSelected && (\n              <>\n                <ChevronRight className=\"w-4 h-4\" />\n                <span>Component: {selectedLayer.type}</span>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n      \n      {/* Context-sensitive actions */}\n      <div className=\"flex items-center gap-2\">\n        {isComponentSelected && (\n          <>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => duplicateLayer(selectedLayerId)}\n            >\n              <Copy className=\"w-4 h-4 mr-1\" />\n              Duplicate\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => removeLayer(selectedLayerId)}\n              className=\"text-destructive hover:text-destructive\"\n            >\n              <Trash className=\"w-4 h-4 mr-1\" />\n              Delete\n            </Button>\n          </>\n        )}\n        \n        <Button variant=\"default\" size=\"sm\">\n          Save\n        </Button>\n      </div>\n    </nav>\n  );\n};\n```\n\n## Integration with External Systems\n\nConnect your navigation to external services:\n\n```tsx\nconst IntegratedNavBar = () => {\n  const [savingStatus, setSavingStatus] = useState('saved'); // 'saving', 'saved', 'error'\n  const [collaborators, setCollaborators] = useState([]);\n  \n  const handleSave = async () => {\n    setSavingStatus('saving');\n    try {\n      const pages = useLayerStore.getState().pages;\n      await saveToYourCMS(pages);\n      setSavingStatus('saved');\n    } catch (error) {\n      setSavingStatus('error');\n    }\n  };\n  \n  const handlePublish = async () => {\n    const pages = useLayerStore.getState().pages;\n    await publishToLiveSite(pages);\n    showNotification('Published successfully!');\n  };\n  \n  return (\n    <nav className=\"h-16 border-b bg-background flex items-center justify-between px-4\">\n      <div className=\"flex items-center gap-4\">\n        <YourLogo />\n        \n        {/* Save Status */}\n        <div className=\"flex items-center gap-2\">\n          {savingStatus === 'saving' && (\n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <Loader2 className=\"w-4 h-4 animate-spin\" />\n              <span className=\"text-sm\">Saving...</span>\n            </div>\n          )}\n          {savingStatus === 'saved' && (\n            <div className=\"flex items-center gap-2 text-green-600\">\n              <Check className=\"w-4 h-4\" />\n              <span className=\"text-sm\">Saved</span>\n            </div>\n          )}\n          {savingStatus === 'error' && (\n            <div className=\"flex items-center gap-2 text-red-600\">\n              <AlertCircle className=\"w-4 h-4\" />\n              <span className=\"text-sm\">Save failed</span>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"flex items-center gap-3\">\n        {/* Collaborators */}\n        <div className=\"flex -space-x-2\">\n          {collaborators.map(user => (\n            <Avatar key={user.id} className=\"w-8 h-8 border-2 border-background\">\n              <AvatarImage src={user.avatar} alt={user.name} />\n              <AvatarFallback>{user.initials}</AvatarFallback>\n            </Avatar>\n          ))}\n        </div>\n        \n        {/* Actions */}\n        <Button variant=\"outline\" size=\"sm\" onClick={handleSave}>\n          Save to CMS\n        </Button>\n        <Button variant=\"default\" size=\"sm\" onClick={handlePublish}>\n          Publish Live\n        </Button>\n        \n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\">\n              <MoreVertical className=\"w-4 h-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent>\n            <DropdownMenuItem onClick={() => shareWithTeam()}>\n              Share with Team\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => viewHistory()}>\n              View History\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => exportCode()}>\n              Export Code\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </nav>\n  );\n};\n```\n\n## Mobile-Responsive Navigation\n\nCreate navigation that works well on mobile devices:\n\n```tsx\nconst ResponsiveNavBar = () => {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const isMobile = useMediaQuery('(max-width: 768px)');\n  \n  if (isMobile) {\n    return (\n      <nav className=\"h-14 border-b bg-background flex items-center justify-between px-4\">\n        <div className=\"flex items-center gap-2\">\n          <YourLogo className=\"h-6\" />\n          <span className=\"font-medium text-sm\">Builder</span>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"default\" size=\"sm\">\n            Save\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n          >\n            <Menu className=\"w-4 h-4\" />\n          </Button>\n        </div>\n        \n        {/* Mobile Menu */}\n        {mobileMenuOpen && (\n          <div className=\"absolute top-14 left-0 right-0 bg-background border-b shadow-lg p-4 space-y-2\">\n            <Button variant=\"outline\" className=\"w-full justify-start\">\n              Preview\n            </Button>\n            <Button variant=\"outline\" className=\"w-full justify-start\">\n              Export\n            </Button>\n            <Button variant=\"outline\" className=\"w-full justify-start\">\n              Settings\n            </Button>\n          </div>\n        )}\n      </nav>\n    );\n  }\n  \n  // Desktop navigation\n  return (\n    <nav className=\"h-16 border-b bg-background flex items-center justify-between px-4\">\n      {/* Standard desktop navigation */}\n    </nav>\n  );\n};\n```\n\n## Best Practices\n\n### Navigation Design\n- **Keep it simple** - Don't overcrowd the navigation\n- **Group related actions** - Use dropdowns for secondary actions\n- **Show context** - Display current page/component information\n- **Provide feedback** - Show save status and loading states\n\n### Performance\n- **Memoize components** - Use React.memo for nav components\n- **Debounce actions** - Avoid rapid save/publish calls\n- **Optimize re-renders** - Subscribe to specific store slices\n\n### Accessibility\n- **Keyboard navigation** - Ensure all actions are keyboard accessible\n- **ARIA labels** - Provide proper labels for screen readers\n- **Focus management** - Maintain logical focus order\n- **Color contrast** - Ensure sufficient contrast for all elements"
      }
    ]
  } as const satisfies ComponentLayer; 