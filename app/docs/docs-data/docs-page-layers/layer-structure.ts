import { ComponentLayer } from "@/components/ui/ui-builder/types";

export const LAYER_STRUCTURE_LAYER = {
    "id": "layer-structure",
    "type": "div",
    "name": "Layer Structure",
    "props": {
      "className": "h-full bg-background px-4 flex flex-col gap-6 min-h-screen",
      "data-group": "layout-persistence"
    },
    "children": [
      {
        "type": "span",
        "children": "Layer Structure",
        "id": "layer-structure-title",
        "name": "Text",
        "props": {
          "className": "text-4xl"
        }
      },
      {
        "id": "layer-structure-intro",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "Understanding the layer structure is fundamental to working with UI Builder. Layers define the hierarchical component tree that powers the visual editor and rendering system."
      },
      {
        "id": "layer-structure-content",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "## Layer Schema\n\n### Basic Layer Structure\n```tsx\ninterface ComponentLayer {\n  id: string;           // Unique identifier\n  type: string;         // Component type (Button, div, etc.)\n  name: string;         // Display name in editor\n  props: Record<string, any>;  // Component properties\n  children: ComponentLayer[] | string;  // Child layers or text content\n}\n```\n\n### Example Layer\n```tsx\nconst buttonLayer: ComponentLayer = {\n  id: 'button-1',\n  type: 'Button',\n  name: 'Primary Button',\n  props: {\n    variant: 'primary',\n    size: 'lg',\n    className: 'w-full'\n  },\n  children: 'Click me'\n};\n```\n\n## Hierarchical Structure\n\n### Parent-Child Relationships\n```tsx\nconst cardLayer: ComponentLayer = {\n  id: 'card-1',\n  type: 'Card',\n  name: 'Product Card',\n  props: {\n    className: 'p-6 border rounded-lg'\n  },\n  children: [\n    {\n      id: 'card-header',\n      type: 'div',\n      name: 'Header',\n      props: { className: 'mb-4' },\n      children: [\n        {\n          id: 'title',\n          type: 'h3',\n          name: 'Title',\n          props: { className: 'text-lg font-semibold' },\n          children: 'Product Name'\n        }\n      ]\n    },\n    {\n      id: 'card-content',\n      type: 'div',\n      name: 'Content',\n      props: { className: 'space-y-2' },\n      children: [\n        {\n          id: 'description',\n          type: 'p',\n          name: 'Description',\n          props: { className: 'text-gray-600' },\n          children: 'Product description here'\n        },\n        {\n          id: 'price',\n          type: 'span',\n          name: 'Price',\n          props: { className: 'text-xl font-bold' },\n          children: '$99.99'\n        }\n      ]\n    }\n  ]\n};\n```\n\n## Layer Types\n\n### Container Layers\n```tsx\n// Layout containers\nconst flexContainer: ComponentLayer = {\n  id: 'flex-1',\n  type: 'div',\n  name: 'Flex Container',\n  props: {\n    className: 'flex items-center justify-between'\n  },\n  children: []\n};\n\nconst gridContainer: ComponentLayer = {\n  id: 'grid-1',\n  type: 'div',\n  name: 'Grid Container',\n  props: {\n    className: 'grid grid-cols-3 gap-4'\n  },\n  children: []\n};\n```\n\n### Content Layers\n```tsx\n// Text content\nconst textLayer: ComponentLayer = {\n  id: 'text-1',\n  type: 'p',\n  name: 'Paragraph',\n  props: {\n    className: 'text-base leading-relaxed'\n  },\n  children: 'Lorem ipsum dolor sit amet...'\n};\n\n// Rich content\nconst markdownLayer: ComponentLayer = {\n  id: 'markdown-1',\n  type: 'Markdown',\n  name: 'Markdown Content',\n  props: {},\n  children: '# Heading\\n\\nThis is **bold** text.'\n};\n```\n\n### Interactive Layers\n```tsx\n// Form inputs\nconst inputLayer: ComponentLayer = {\n  id: 'input-1',\n  type: 'Input',\n  name: 'Email Input',\n  props: {\n    type: 'email',\n    placeholder: 'Enter your email',\n    required: true\n  },\n  children: []\n};\n\n// Buttons\nconst buttonLayer: ComponentLayer = {\n  id: 'button-1',\n  type: 'Button',\n  name: 'Submit Button',\n  props: {\n    type: 'submit',\n    variant: 'primary'\n  },\n  children: 'Submit'\n};\n```\n\n## Layer Properties\n\n### Standard Props\n```tsx\ninterface LayerProps {\n  // Styling\n  className?: string;\n  style?: React.CSSProperties;\n  \n  // Data binding\n  'data-*'?: string;\n  \n  // Event handlers\n  onClick?: () => void;\n  onChange?: (value: any) => void;\n  \n  // Accessibility\n  'aria-*'?: string;\n  role?: string;\n  tabIndex?: number;\n  \n  // Component-specific props\n  [key: string]: any;\n}\n```\n\n### Dynamic Props\n```tsx\n// Variable-bound props\nconst dynamicLayer: ComponentLayer = {\n  id: 'dynamic-1',\n  type: 'Button',\n  name: 'Dynamic Button',\n  props: {\n    disabled: '${isLoading}',\n    className: '${buttonStyle}',\n    children: '${buttonText}'\n  },\n  children: []\n};\n```\n\n## Layer Manipulation\n\n### Adding Layers\n```tsx\nfunction addLayer(parentId: string, newLayer: ComponentLayer) {\n  const parent = findLayerById(parentId);\n  if (parent && Array.isArray(parent.children)) {\n    parent.children.push(newLayer);\n  }\n}\n```\n\n### Removing Layers\n```tsx\nfunction removeLayer(layerId: string) {\n  const parent = findParentLayer(layerId);\n  if (parent && Array.isArray(parent.children)) {\n    parent.children = parent.children.filter(child => \n      typeof child === 'object' && child.id !== layerId\n    );\n  }\n}\n```\n\n### Moving Layers\n```tsx\nfunction moveLayer(\n  layerId: string, \n  newParentId: string, \n  index?: number\n) {\n  const layer = findLayerById(layerId);\n  const newParent = findLayerById(newParentId);\n  \n  // Remove from current parent\n  removeLayer(layerId);\n  \n  // Add to new parent\n  if (newParent && Array.isArray(newParent.children)) {\n    if (index !== undefined) {\n      newParent.children.splice(index, 0, layer);\n    } else {\n      newParent.children.push(layer);\n    }\n  }\n}\n```\n\n### Duplicating Layers\n```tsx\nfunction duplicateLayer(layerId: string): ComponentLayer {\n  const original = findLayerById(layerId);\n  \n  function deepClone(layer: ComponentLayer): ComponentLayer {\n    return {\n      ...layer,\n      id: generateUniqueId(),\n      children: Array.isArray(layer.children)\n        ? layer.children.map(child => \n            typeof child === 'string' ? child : deepClone(child)\n          )\n        : layer.children\n    };\n  }\n  \n  return deepClone(original);\n}\n```\n\n## Layer Validation\n\n### Schema Validation\n```tsx\nfunction validateLayer(layer: ComponentLayer): ValidationResult {\n  const errors: string[] = [];\n  \n  // Required fields\n  if (!layer.id) errors.push('Layer must have an id');\n  if (!layer.type) errors.push('Layer must have a type');\n  if (!layer.name) errors.push('Layer must have a name');\n  \n  // ID uniqueness\n  if (isDuplicateId(layer.id)) {\n    errors.push(`Duplicate layer id: ${layer.id}`);\n  }\n  \n  // Component type validation\n  if (!isValidComponentType(layer.type)) {\n    errors.push(`Invalid component type: ${layer.type}`);\n  }\n  \n  // Recursive validation for children\n  if (Array.isArray(layer.children)) {\n    layer.children.forEach(child => {\n      if (typeof child === 'object') {\n        const childValidation = validateLayer(child);\n        errors.push(...childValidation.errors);\n      }\n    });\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n```\n\n## Layer Utilities\n\n### Tree Traversal\n```tsx\nfunction traverseLayer(\n  layer: ComponentLayer,\n  callback: (layer: ComponentLayer, depth: number) => void,\n  depth = 0\n) {\n  callback(layer, depth);\n  \n  if (Array.isArray(layer.children)) {\n    layer.children.forEach(child => {\n      if (typeof child === 'object') {\n        traverseLayer(child, callback, depth + 1);\n      }\n    });\n  }\n}\n```\n\n### Layer Search\n```tsx\nfunction findLayerById(layerId: string, root: ComponentLayer): ComponentLayer | null {\n  if (root.id === layerId) return root;\n  \n  if (Array.isArray(root.children)) {\n    for (const child of root.children) {\n      if (typeof child === 'object') {\n        const found = findLayerById(layerId, child);\n        if (found) return found;\n      }\n    }\n  }\n  \n  return null;\n}\n\nfunction findLayersByType(type: string, root: ComponentLayer): ComponentLayer[] {\n  const results: ComponentLayer[] = [];\n  \n  traverseLayer(root, (layer) => {\n    if (layer.type === type) {\n      results.push(layer);\n    }\n  });\n  \n  return results;\n}\n```\n\n## Best Practices\n\n- **Unique IDs** - Ensure every layer has a unique identifier\n- **Meaningful Names** - Use descriptive names for editor clarity\n- **Proper Nesting** - Follow semantic HTML structure where possible\n- **Consistent Props** - Use consistent property naming conventions\n- **Validation** - Always validate layer structure before rendering\n- **Performance** - Keep layer trees reasonably shallow for performance"
      }
    ]
  } as const satisfies ComponentLayer; 