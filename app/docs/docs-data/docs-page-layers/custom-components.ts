import { ComponentLayer } from "@/components/ui/ui-builder/types";

export const CUSTOM_COMPONENTS_LAYER = {
    "id": "custom-components",
    "type": "div",
    "name": "Creating Custom Components",
    "props": {
      "className": "h-full bg-background px-4 flex flex-col gap-6 min-h-screen",
      "data-group": "component-system"
    },
    "children": [
      {
        "type": "span",
        "children": "Creating Custom Components",
        "id": "custom-components-title",
        "name": "Text",
        "props": {
          "className": "text-4xl"
        }
      },
      {
        "id": "custom-components-intro",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "Learn how to integrate your existing React components into UI Builder. This guide covers everything from basic component definitions to advanced features like variable bindings and custom form fields."
      },
      {
        "id": "custom-components-content",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "## Step 1: Create Your React Component\n\nUI Builder works with your existing React components without any modifications. Here's a complete example:\n\n```tsx\n// components/ui/fancy-component.tsx\ninterface FancyComponentProps {\n  className?: string;\n  children?: React.ReactNode;\n  title: string;\n  count: number;\n  disabled?: boolean;\n  timestamp?: Date;\n  mode: 'fancy' | 'boring';\n}\n\nexport function FancyComponent({ \n  className,\n  children,\n  title,\n  count,\n  disabled,\n  timestamp,\n  mode\n}: FancyComponentProps) {\n  return (\n    <div className={className}>\n      <h3 className={mode === 'fancy' ? 'text-purple-600' : 'text-gray-600'}>\n        {title} ({count})\n      </h3>\n      {timestamp && <time>{timestamp.toLocaleString()}</time>}\n      <div className={disabled ? 'opacity-50' : ''}>\n        {children}\n      </div>\n    </div>\n  );\n}\n```\n\n## Step 2: Create the Component Definition\n\nAdd your component to the registry with a complete definition:\n\n```tsx\nimport { z } from 'zod';\nimport { FancyComponent } from '@/components/ui/fancy-component';\nimport { classNameFieldOverrides, childrenFieldOverrides } from '@/lib/ui-builder/registry/form-field-overrides';\nimport { ComponentRegistry } from '@/components/ui/ui-builder/types';\n\nconst myComponentRegistry: ComponentRegistry = {\n  // Include existing components\n  ...primitiveComponentDefinitions,\n  ...complexComponentDefinitions,\n  \n  // Add your custom component\n  FancyComponent: {\n    // The React component itself\n    component: FancyComponent,\n    \n    // Zod schema defining props for auto-form generation\n    schema: z.object({\n      className: z.string().optional(),\n      children: z.any().optional(),\n      title: z.string().default('Default Title'),\n      count: z.coerce.number().default(1),\n      disabled: z.boolean().optional(),\n      timestamp: z.coerce.date().optional(),\n      mode: z.enum(['fancy', 'boring']).default('fancy'),\n    }),\n    \n    // Import path for code generation\n    from: '@/components/ui/fancy-component',\n    \n    // Custom form field overrides (optional)\n    fieldOverrides: {\n      className: (layer) => classNameFieldOverrides(layer),\n      children: (layer) => childrenFieldOverrides(layer),\n      // Other props use auto-generated form fields\n    }\n  }\n};\n```\n\n## Step 3: Design the Zod Schema\n\nThe schema is crucial as it drives the auto-generated form in the properties panel:\n\n### Supported Zod Types\n\n```tsx\nschema: z.object({\n  // Text input\n  title: z.string().default('Default Title'),\n  \n  // Number input (use coerce for string-to-number conversion)\n  count: z.coerce.number().default(1),\n  \n  // Toggle switch\n  disabled: z.boolean().optional(),\n  \n  // Date picker (use coerce for string-to-date conversion)\n  timestamp: z.coerce.date().optional(),\n  \n  // Select dropdown\n  mode: z.enum(['fancy', 'boring']).default('fancy'),\n  \n  // Special props (use z.any() and provide fieldOverrides)\n  className: z.string().optional(),\n  children: z.any().optional(),\n  \n  // Nested objects\n  config: z.object({\n    theme: z.string().default('light'),\n    size: z.enum(['sm', 'md', 'lg']).default('md')\n  }).optional(),\n  \n  // Arrays\n  items: z.array(z.object({\n    label: z.string(),\n    value: z.string()\n  })).default([])\n})\n```\n\n### Schema Best Practices\n\n- **Use `.default()` values** to provide sensible starting points\n- **Use `z.coerce.number()`** for numeric inputs to handle string conversion\n- **Use `z.coerce.date()`** for date inputs to handle string conversion  \n- **Use `z.any()` for `children`** and provide field overrides\n- **Keep nested objects simple** for better editing experience\n- **Use descriptive enum values** that make sense to non-technical users\n\n## Advanced Features\n\n### Default Variable Bindings\n\nAutomatically bind component properties to variables when components are added:\n\n```tsx\nFancyComponent: {\n  component: FancyComponent,\n  schema: /* ... */,\n  from: '@/components/ui/fancy-component',\n  \n  // Auto-bind properties to variables\n  defaultVariableBindings: [\n    {\n      propName: 'title',\n      variableId: 'page-title-var',\n      immutable: false // Users can unbind this\n    },\n    {\n      propName: 'count', \n      variableId: 'item-count-var',\n      immutable: true // Locked binding for system data\n    }\n  ]\n}\n```\n\n**Use cases for variable bindings:**\n- **User data**: Auto-bind user names, emails, profile info\n- **Branding**: Lock brand colors, logos, company names  \n- **System data**: Bind counts, statuses, timestamps\n- **Multi-tenant**: Different data per customer/tenant\n\n### Default Children\n\nProvide default child components when users add your component:\n\n```tsx\nFancyComponent: {\n  component: FancyComponent,\n  schema: /* ... */,\n  from: '@/components/ui/fancy-component',\n  \n  // Default children when component is added\n  defaultChildren: [\n    {\n      id: 'fancy-content',\n      type: 'div',\n      name: 'Content Container',\n      props: { className: 'p-4' },\n      children: [\n        {\n          id: 'fancy-text',\n          type: 'span', \n          name: 'Default Text',\n          props: {},\n          children: 'Default content goes here'\n        }\n      ]\n    }\n  ]\n}\n```\n\n## Component Definition Properties Reference\n\n### Required\n- **`component`**: React component function/class\n- **`schema`**: Zod schema defining props\n- **`from`**: Import path for code generation\n\n### Optional\n- **`isFromDefaultExport`**: Boolean, use default export in generated code\n- **`fieldOverrides`**: Object mapping prop names to custom form fields\n- **`defaultChildren`**: Array of ComponentLayer objects or string\n- **`defaultVariableBindings`**: Array of automatic variable bindings\n\n### Variable Binding Properties\n- **`propName`**: Component property to bind\n- **`variableId`**: ID of variable to bind to\n- **`immutable`**: Boolean, prevent users from unbinding\n\n## Best Practices\n\n### Component Design\n- **Accept standard props**: Always include `className` and `children`\n- **Use TypeScript interfaces**: Clear prop definitions help with schema creation\n- **Keep props simple**: Complex nested objects are hard to edit visually\n- **Follow design system**: Consistent with your existing component patterns\n\n### Schema Design\n- **Provide meaningful defaults**: Reduce setup friction for users\n- **Use clear enum values**: Help non-technical users understand options\n- **Group related props**: Use nested objects for logical grouping\n- **Validate appropriately**: Don't over-constrain creative use\n\n### Testing Your Components\n- **Test in the editor**: Add to canvas and verify the editing experience\n- **Check form generation**: Ensure all props have appropriate form fields\n- **Verify code generation**: Export and check the generated React code\n- **Test with variables**: Ensure variable bindings work as expected"
      }
    ]
  } as const satisfies ComponentLayer; 