import { ComponentLayer } from "@/components/ui/ui-builder/types";

export const DATA_BINDING_LAYER = {
    "id": "data-binding",
    "type": "div",
    "name": "Data Binding",
    "props": {
      "className": "h-full bg-background px-4 flex flex-col gap-6 min-h-screen",
      "data-group": "data-variables"
    },
    "children": [
      {
        "type": "span",
        "children": "Data Binding",
        "id": "data-binding-title",
        "name": "Text",
        "props": {
          "className": "text-4xl"
        }
      },
      {
        "id": "data-binding-intro",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "Connect UI Builder components to external data sources through variable binding and runtime value injection. Transform static designs into dynamic, data-driven interfaces that respond to real-time data."
      },
      {
        "id": "data-binding-content",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "## How Data Binding Works\n\nData binding in UI Builder operates through a two-phase process:\n\n1. **Design Phase**: Variables are defined and bound to component properties\n2. **Runtime Phase**: Variable values are injected when rendering pages\n\n```tsx\n// Design phase - define structure with variable bindings\nconst pageStructure = {\n  id: 'user-profile',\n  type: 'div',\n  children: [\n    {\n      id: 'user-name',\n      type: 'h1',\n      props: {\n        children: { __variableRef: 'userName' } // Bound to variable\n      }\n    },\n    {\n      id: 'user-email',\n      type: 'p',\n      props: {\n        children: { __variableRef: 'userEmail' } // Bound to variable\n      }\n    }\n  ]\n};\n\n// Runtime phase - inject real data\nconst variableValues = {\n  userName: 'Jane Smith',\n  userEmail: 'jane@example.com'\n};\n\n<LayerRenderer \n  page={pageStructure}\n  variables={variableDefinitions}\n  variableValues={variableValues}\n  componentRegistry={myComponentRegistry}\n/>\n```\n\n## Static Data Binding\n\n### Direct Value Injection\n\nThe simplest form of data binding uses static data:\n\n```tsx\nimport LayerRenderer from '@/components/ui/ui-builder/layer-renderer';\n\nfunction StaticDataExample() {\n  // Static data from your application\n  const userData = {\n    name: 'John Doe',\n    email: 'john@example.com',\n    role: 'Admin',\n    isActive: true\n  };\n\n  // Map data to variable values\n  const variableValues = {\n    'user-name-var': userData.name,\n    'user-email-var': userData.email,\n    'user-role-var': userData.role,\n    'user-active-var': userData.isActive\n  };\n\n  return (\n    <LayerRenderer\n      page={userProfilePage}\n      componentRegistry={myComponentRegistry}\n      variables={userVariables}\n      variableValues={variableValues}\n    />\n  );\n}\n```\n\n### Configuration-Based Data\n\n```tsx\nfunction ConfigurationExample() {\n  // Application configuration\n  const appConfig = {\n    companyName: 'Acme Corporation',\n    primaryColor: '#3b82f6',\n    supportEmail: 'support@acme.com',\n    featuresEnabled: {\n      darkMode: true,\n      notifications: false,\n      analytics: true\n    }\n  };\n\n  const configVariables = {\n    'company-name': appConfig.companyName,\n    'primary-color': appConfig.primaryColor,\n    'support-email': appConfig.supportEmail,\n    'dark-mode-enabled': appConfig.featuresEnabled.darkMode,\n    'notifications-enabled': appConfig.featuresEnabled.notifications\n  };\n\n  return (\n    <LayerRenderer\n      page={configPage}\n      variables={configVariableDefinitions}\n      variableValues={configVariables}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n## Dynamic Data Binding\n\n### API Data Integration\n\nConnect UI Builder to API responses:\n\n```tsx\nfunction APIDataExample({ userId }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(`/api/users/${userId}`)\n      .then(response => response.json())\n      .then(userData => {\n        setUser(userData);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Failed to load user data:', error);\n        setLoading(false);\n      });\n  }, [userId]);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!user) {\n    return <div>User not found</div>;\n  }\n\n  // Map API response to variable values\n  const apiVariables = {\n    'user-id': user.id,\n    'user-name': user.name,\n    'user-email': user.email,\n    'user-avatar': user.avatarUrl || '/default-avatar.png',\n    'is-premium': user.subscription?.plan === 'premium',\n    'last-login': user.lastLoginAt\n  };\n\n  return (\n    <LayerRenderer\n      page={userDashboardPage}\n      variables={userVariables}\n      variableValues={apiVariables}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n### Real-Time Data Updates\n\n```tsx\nfunction RealTimeDataExample() {\n  const [liveData, setLiveData] = useState({\n    currentPrice: 0,\n    onlineUsers: 0,\n    serverStatus: 'unknown'\n  });\n\n  useEffect(() => {\n    // WebSocket connection for real-time updates\n    const ws = new WebSocket('wss://api.example.com/live');\n    \n    ws.onmessage = (event) => {\n      const update = JSON.parse(event.data);\n      setLiveData(prev => ({ ...prev, ...update }));\n    };\n\n    return () => ws.close();\n  }, []);\n\n  const liveVariables = {\n    'current-price': liveData.currentPrice,\n    'online-users': liveData.onlineUsers,\n    'server-status': liveData.serverStatus,\n    'last-updated': new Date().toLocaleTimeString()\n  };\n\n  return (\n    <LayerRenderer\n      page={dashboardPage}\n      variables={dashboardVariables}\n      variableValues={liveVariables}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n## Database Integration\n\n### Server-Side Data Binding\n\n```tsx\n// pages/dashboard/[id].tsx\nexport async function getServerSideProps({ params }) {\n  try {\n    // Fetch data on the server\n    const [user, analytics, notifications] = await Promise.all([\n      fetch(`${process.env.API_URL}/users/${params.id}`).then(r => r.json()),\n      fetch(`${process.env.API_URL}/analytics/${params.id}`).then(r => r.json()),\n      fetch(`${process.env.API_URL}/notifications/${params.id}`).then(r => r.json())\n    ]);\n\n    // Map database results to variable values\n    const variableValues = {\n      'user-name': user.name,\n      'user-email': user.email,\n      'total-visits': analytics.totalVisits,\n      'conversion-rate': analytics.conversionRate,\n      'unread-notifications': notifications.unreadCount,\n      'last-activity': user.lastActivityAt\n    };\n\n    return {\n      props: {\n        pageData: dashboardPageStructure,\n        variables: dashboardVariables,\n        variableValues\n      }\n    };\n  } catch (error) {\n    return {\n      notFound: true\n    };\n  }\n}\n\nfunction UserDashboard({ pageData, variables, variableValues }) {\n  return (\n    <LayerRenderer\n      page={pageData}\n      variables={variables}\n      variableValues={variableValues}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n### Client-Side Database Queries\n\n```tsx\nimport { useQuery } from '@tanstack/react-query';\n\nfunction ClientSideDataBinding({ projectId }) {\n  const { data: project, isLoading } = useQuery({\n    queryKey: ['project', projectId],\n    queryFn: () => fetch(`/api/projects/${projectId}`).then(r => r.json())\n  });\n\n  const { data: metrics } = useQuery({\n    queryKey: ['metrics', projectId],\n    queryFn: () => fetch(`/api/metrics/${projectId}`).then(r => r.json()),\n    enabled: !!projectId\n  });\n\n  if (isLoading) {\n    return <ProjectSkeleton />;\n  }\n\n  const projectVariables = {\n    'project-name': project?.name || 'Unknown Project',\n    'project-description': project?.description || '',\n    'project-status': project?.status || 'inactive',\n    'total-tasks': metrics?.totalTasks || 0,\n    'completed-tasks': metrics?.completedTasks || 0,\n    'team-size': project?.team?.length || 0\n  };\n\n  return (\n    <LayerRenderer\n      page={projectPageStructure}\n      variables={projectVariableDefinitions}\n      variableValues={projectVariables}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n## Context and State Integration\n\n### React Context Data\n\n```tsx\nimport { useContext } from 'react';\nimport { AuthContext, ThemeContext } from '../contexts';\n\nfunction ContextDataBinding() {\n  const { user, permissions } = useContext(AuthContext);\n  const { theme, preferences } = useContext(ThemeContext);\n\n  const contextVariables = {\n    'current-user': user?.name || 'Guest',\n    'user-role': user?.role || 'viewer',\n    'can-edit': permissions?.canEdit || false,\n    'can-admin': permissions?.canAdmin || false,\n    'theme-mode': theme.mode,\n    'primary-color': theme.colors.primary,\n    'font-size': preferences.fontSize\n  };\n\n  return (\n    <LayerRenderer\n      page={appShellPage}\n      variables={appVariables}\n      variableValues={contextVariables}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n### Redux Store Integration\n\n```tsx\nimport { useSelector } from 'react-redux';\n\nfunction ReduxDataBinding() {\n  const user = useSelector(state => state.auth.user);\n  const cart = useSelector(state => state.cart);\n  const notifications = useSelector(state => state.notifications);\n\n  const storeVariables = {\n    'user-name': user?.name,\n    'user-avatar': user?.avatar,\n    'cart-items': cart.items.length,\n    'cart-total': cart.total,\n    'unread-notifications': notifications.unread.length,\n    'is-logged-in': !!user\n  };\n\n  return (\n    <LayerRenderer\n      page={headerPage}\n      variables={headerVariables}\n      variableValues={storeVariables}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n## Form Data Binding\n\n### Controlled Form Components\n\n```tsx\nfunction FormDataBinding() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    newsletter: false,\n    plan: 'basic'\n  });\n\n  const [errors, setErrors] = useState({});\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // Clear errors when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: null }));\n    }\n  };\n\n  const formVariables = {\n    'form-name': formData.name,\n    'form-email': formData.email,\n    'form-newsletter': formData.newsletter,\n    'form-plan': formData.plan,\n    'name-error': errors.name || '',\n    'email-error': errors.email || '',\n    'form-valid': Object.keys(errors).length === 0\n  };\n\n  return (\n    <div>\n      <LayerRenderer\n        page={registrationFormPage}\n        variables={formVariableDefinitions}\n        variableValues={formVariables}\n        componentRegistry={myComponentRegistry}\n      />\n      \n      {/* Form controls outside of UI Builder */}\n      <div className=\"form-controls\">\n        <input\n          value={formData.name}\n          onChange={e => handleInputChange('name', e.target.value)}\n          placeholder=\"Name\"\n        />\n        <input\n          value={formData.email}\n          onChange={e => handleInputChange('email', e.target.value)}\n          placeholder=\"Email\"\n        />\n      </div>\n    </div>\n  );\n}\n```\n\n## Data Transformation\n\n### Data Mapping and Formatting\n\n```tsx\nfunction DataTransformationExample({ rawData }) {\n  // Transform raw API data into UI-friendly format\n  const transformedData = useMemo(() => {\n    if (!rawData) return {};\n\n    return {\n      // Format currency\n      'display-price': new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD'\n      }).format(rawData.price),\n      \n      // Format dates\n      'formatted-date': new Date(rawData.createdAt).toLocaleDateString(),\n      'relative-time': formatDistanceToNow(new Date(rawData.updatedAt)),\n      \n      // Transform status\n      'status-color': {\n        'active': 'green',\n        'pending': 'yellow',\n        'inactive': 'red'\n      }[rawData.status] || 'gray',\n      \n      // Calculate derived values\n      'completion-percentage': Math.round(\n        (rawData.completedTasks / rawData.totalTasks) * 100\n      ),\n      \n      // Format arrays\n      'tags-list': rawData.tags?.join(', ') || 'No tags',\n      'team-names': rawData.team?.map(member => member.name).join(', ') || 'No team'\n    };\n  }, [rawData]);\n\n  return (\n    <LayerRenderer\n      page={projectCardPage}\n      variables={projectVariables}\n      variableValues={transformedData}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n### Conditional Data Binding\n\n```tsx\nfunction ConditionalDataBinding({ user, features }) {\n  const conditionalVariables = useMemo(() => {\n    const base = {\n      'user-name': user?.name || 'Guest',\n      'is-authenticated': !!user\n    };\n\n    // Add premium features if user has access\n    if (user?.subscription?.plan === 'premium') {\n      base['show-premium-badge'] = true;\n      base['premium-features'] = 'Unlock unlimited projects';\n    } else {\n      base['show-premium-badge'] = false;\n      base['premium-features'] = 'Upgrade to Premium';\n    }\n\n    // Feature flags\n    if (features?.enableBetaFeatures) {\n      base['show-beta-banner'] = true;\n      base['beta-message'] = 'Try our new beta features!';\n    }\n\n    // Admin-only data\n    if (user?.role === 'admin') {\n      base['admin-panel-visible'] = true;\n      base['user-count'] = features?.userCount || 0;\n    }\n\n    return base;\n  }, [user, features]);\n\n  return (\n    <LayerRenderer\n      page={dashboardPage}\n      variables={dashboardVariables}\n      variableValues={conditionalVariables}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n## Error Handling and Loading States\n\n### Graceful Error Handling\n\n```tsx\nfunction ErrorHandlingExample({ dataId }) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    setError(null);\n    \n    fetch(`/api/data/${dataId}`)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        return response.json();\n      })\n      .then(setData)\n      .catch(setError)\n      .finally(() => setLoading(false));\n  }, [dataId]);\n\n  const statusVariables = {\n    'is-loading': loading,\n    'has-error': !!error,\n    'error-message': error?.message || '',\n    'has-data': !!data && !loading && !error,\n    \n    // Data variables (safe with fallbacks)\n    'title': data?.title || 'No title available',\n    'description': data?.description || 'No description available',\n    'status': data?.status || 'unknown',\n    'updated-date': data?.updatedAt \n      ? new Date(data.updatedAt).toLocaleDateString() \n      : 'Never'\n  };\n\n  return (\n    <LayerRenderer\n      page={contentPage}\n      variables={contentVariables}\n      variableValues={statusVariables}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n## Performance Optimization\n\n### Memoized Data Processing\n\n```tsx\nfunction OptimizedDataBinding({ largeDataset }) {\n  // Memoize expensive data transformations\n  const processedData = useMemo(() => {\n    if (!largeDataset?.length) return {};\n\n    // Expensive calculations only run when dataset changes\n    const total = largeDataset.reduce((sum, item) => sum + item.value, 0);\n    const average = total / largeDataset.length;\n    const maximum = Math.max(...largeDataset.map(item => item.value));\n    const minimum = Math.min(...largeDataset.map(item => item.value));\n    \n    return {\n      'total-value': total,\n      'average-value': average.toFixed(2),\n      'max-value': maximum,\n      'min-value': minimum,\n      'item-count': largeDataset.length\n    };\n  }, [largeDataset]);\n\n  // Memoize the component to prevent unnecessary re-renders\n  return useMemo(() => (\n    <LayerRenderer\n      page={analyticsPage}\n      variables={analyticsVariables}\n      variableValues={processedData}\n      componentRegistry={myComponentRegistry}\n    />\n  ), [processedData]);\n}\n```\n\n### Lazy Data Loading\n\n```tsx\nfunction LazyDataBinding({ shouldLoad }) {\n  const [data, setData] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    if (shouldLoad && !loaded) {\n      fetch('/api/expensive-data')\n        .then(response => response.json())\n        .then(result => {\n          setData(result);\n          setLoaded(true);\n        });\n    }\n  }, [shouldLoad, loaded]);\n\n  const lazyVariables = {\n    'data-loaded': loaded,\n    'show-placeholder': !loaded,\n    'content': data?.content || 'Loading...',\n    'metadata': data?.metadata || {}\n  };\n\n  return (\n    <LayerRenderer\n      page={lazyContentPage}\n      variables={lazyVariables}\n      variableValues={lazyVariables}\n      componentRegistry={myComponentRegistry}\n    />\n  );\n}\n```\n\n## Best Practices\n\n### Data Binding Patterns\n\n- **Use meaningful variable names** that reflect their data source\n- **Provide fallback values** for all variables to prevent rendering errors\n- **Memoize expensive data transformations** to optimize performance\n- **Handle loading and error states** gracefully in your data variables\n- **Separate data fetching logic** from UI Builder rendering logic\n- **Use TypeScript** for better type safety with variable values\n\n### Security Considerations\n\n- **Sanitize user-provided data** before binding to variables\n- **Validate data types** match variable definitions\n- **Use environment variables** for sensitive configuration\n- **Implement proper authentication** for data endpoints\n- **Escape HTML content** in string variables to prevent XSS\n\n### Performance Tips\n\n- **Batch data requests** when possible to reduce API calls\n- **Use React.memo** to prevent unnecessary re-renders\n- **Implement pagination** for large datasets\n- **Cache frequently accessed data** using React Query or SWR\n- **Debounce rapid data updates** to avoid excessive re-renders"
      }
    ]
  } as const satisfies ComponentLayer; 