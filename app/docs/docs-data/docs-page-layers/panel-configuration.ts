import { ComponentLayer } from "@/components/ui/ui-builder/types";

export const PANEL_CONFIGURATION_LAYER = {
    "id": "panel-configuration",
    "type": "div",
    "name": "Panel Configuration",
    "props": {
      "className": "h-full bg-background px-4 flex flex-col gap-6 min-h-screen",
      "data-group": "advanced-configuration"
    },
    "children": [
      {
        "type": "span",
        "children": "Panel Configuration",
        "id": "panel-configuration-title",
        "name": "Text",
        "props": {
          "className": "text-4xl"
        }
      },
      {
        "id": "panel-configuration-intro",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "Customize the UI Builder's interface by configuring panels, tab labels, and adding your own components to the editor. The `panelConfig` prop gives you complete control over the editor's layout and functionality."
      },
      {
        "id": "panel-configuration-overview",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "## Understanding Panel Configuration\n\nUI Builder's interface consists of several configurable panels:\n\n- **Left Panel (Page Config)**: Contains tabs for Layers, Appearance, and Variables\n- **Center Panel (Editor)**: The main canvas and preview area\n- **Right Panel (Properties)**: Component property editing forms\n- **Navigation Bar**: Top navigation and controls\n\nThe `panelConfig` prop allows you to:\n- âœ… **Customize tab labels** in the left panel\n- âœ… **Replace tab content** with your own components\n- âœ… **Add new tabs** with custom functionality\n- âœ… **Remove unwanted tabs** for simplified interfaces\n- âœ… **Override entire panels** with custom implementations\n\n## Interactive Demo\n\nTry the different configurations below to see how `panelConfig` works:"
      },
      {
        "id": "panel-configuration-demo",
        "type": "div",
        "name": "Panel Configuration Demo",
        "props": {
          "className": "w-full border rounded-lg overflow-hidden bg-white shadow-sm"
        },
        "children": [
          {
            "id": "demo-iframe",
            "type": "iframe",
            "name": "Demo Iframe",
            "props": {
              "src": "/examples/editor/panel-config",
              "className": "w-full h-[600px] border-none",
              "title": "Panel Configuration Demo"
            },
            "children": []
          }
        ]
      },
      {
        "id": "basic-usage",
        "type": "Markdown",
        "name": "Markdown", 
        "props": {},
        "children": "## Basic Usage\n\n### Default Configuration\n\nBy default, UI Builder includes three tabs in the left panel:\n\n```tsx\nimport UIBuilder from '@/components/ui/ui-builder';\n\n// Uses default panel configuration\n<UIBuilder componentRegistry={myRegistry} />\n```\n\nThis gives you:\n- **Layers**: Component tree and page management\n- **Appearance**: Tailwind theme and styling controls  \n- **Data**: Variable management and binding\n\n### Custom Tab Labels\n\nRename tabs to match your workflow:\n\n```tsx\nimport UIBuilder, { defaultConfigTabsContent } from '@/components/ui/ui-builder';\n\nconst customPanelConfig = {\n  pageConfigPanelTabsContent: {\n    layers: { \n      title: \"Structure\", \n      content: defaultConfigTabsContent().layers.content \n    },\n    appearance: { \n      title: \"Design\", \n      content: defaultConfigTabsContent().appearance?.content \n    },\n    data: { \n      title: \"Variables\", \n      content: defaultConfigTabsContent().data?.content \n    }\n  }\n};\n\n<UIBuilder \n  componentRegistry={myRegistry}\n  panelConfig={customPanelConfig}\n/>\n```\n\n### Minimal Configuration\n\nShow only essential panels:\n\n```tsx\nconst minimalPanelConfig = {\n  pageConfigPanelTabsContent: {\n    layers: { \n      title: \"Structure\", \n      content: defaultConfigTabsContent().layers.content \n    }\n    // Only show the layers tab, hide appearance and data\n  }\n};\n\n<UIBuilder \n  componentRegistry={myRegistry}\n  panelConfig={minimalPanelConfig}\n/>\n```"
      },
      {
        "id": "custom-panel-content",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "## Custom Panel Content\n\nReplace default panel content with your own React components:\n\n### Custom Appearance Panel\n\nCreate a branded design panel:\n\n```tsx\nconst CustomAppearancePanel = () => (\n  <div className=\"p-4 space-y-4\">\n    <div className=\"text-sm font-medium\">ðŸŽ¨ Brand Design System</div>\n    \n    {/* Brand Colors */}\n    <div className=\"space-y-2\">\n      <div className=\"text-xs text-muted-foreground\">Brand Colors</div>\n      <div className=\"grid grid-cols-4 gap-2\">\n        {brandColors.map((color) => (\n          <div \n            key={color.name}\n            className=\"h-8 rounded border cursor-pointer\"\n            style={{ backgroundColor: color.value }}\n            onClick={() => applyBrandColor(color)}\n            title={color.name}\n          />\n        ))}\n      </div>\n    </div>\n    \n    {/* Typography */}\n    <div className=\"space-y-2\">\n      <div className=\"text-xs text-muted-foreground\">Typography Scale</div>\n      <div className=\"space-y-1\">\n        {typographyScale.map((scale) => (\n          <div \n            key={scale.name}\n            className={`text-${scale.size} border-l-2 pl-2`}\n            style={{ borderColor: scale.color }}\n          >\n            {scale.name}\n          </div>\n        ))}\n      </div>\n    </div>\n    \n    {/* Actions */}\n    <Button \n      size=\"sm\" \n      className=\"w-full\"\n      onClick={exportTheme}\n    >\n      Export Theme\n    </Button>\n  </div>\n);\n\nconst customPanelConfig = {\n  pageConfigPanelTabsContent: {\n    layers: { title: \"Layers\", content: defaultConfigTabsContent().layers.content },\n    appearance: { title: \"Brand\", content: <CustomAppearancePanel /> },\n    data: { title: \"Data\", content: defaultConfigTabsContent().data?.content }\n  }\n};\n```\n\n### Custom Data Panel\n\nIntegrate with your data sources:\n\n```tsx\nconst CustomDataPanel = () => {\n  const [dataSources, setDataSources] = useState([]);\n  const [isConnecting, setIsConnecting] = useState(false);\n  \n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"text-sm font-medium flex items-center gap-2\">\n        <Database className=\"h-4 w-4\" />\n        Data Sources\n      </div>\n      \n      {/* Connected Sources */}\n      <div className=\"space-y-2\">\n        {dataSources.map((source) => (\n          <div key={source.id} className=\"p-2 border rounded text-xs\">\n            <div className=\"font-medium flex items-center gap-2\">\n              <div className={`w-2 h-2 rounded-full ${\n                source.connected ? 'bg-green-500' : 'bg-red-500'\n              }`} />\n              {source.name}\n            </div>\n            <div className=\"text-muted-foreground\">\n              {source.connected \n                ? `Connected â€¢ ${source.recordCount} records`\n                : 'Disconnected'\n              }\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      {/* Add New Source */}\n      <Button \n        size=\"sm\" \n        className=\"w-full\"\n        onClick={openDataSourceDialog}\n        disabled={isConnecting}\n      >\n        {isConnecting ? 'Connecting...' : 'Add Data Source'}\n      </Button>\n    </div>\n  );\n};\n```\n\n### Adding New Tabs\n\nExtend the interface with custom functionality:\n\n```tsx\nconst CustomSettingsPanel = () => (\n  <div className=\"p-4 space-y-4\">\n    <div className=\"text-sm font-medium flex items-center gap-2\">\n      <Settings className=\"h-4 w-4\" />\n      Project Settings\n    </div>\n    \n    <div className=\"space-y-3\">\n      <div className=\"space-y-1\">\n        <label className=\"text-xs text-muted-foreground\">Environment</label>\n        <select className=\"w-full text-sm border rounded px-2 py-1\">\n          <option>Development</option>\n          <option>Staging</option>\n          <option>Production</option>\n        </select>\n      </div>\n      \n      <div className=\"space-y-1\">\n        <label className=\"text-xs text-muted-foreground\">Framework</label>\n        <input \n          type=\"text\" \n          value=\"Next.js 14\" \n          className=\"w-full text-sm border rounded px-2 py-1\"\n          readOnly \n        />\n      </div>\n      \n      <div className=\"space-y-1\">\n        <label className=\"text-xs text-muted-foreground\">Deploy Target</label>\n        <input \n          type=\"text\" \n          value=\"Vercel\" \n          className=\"w-full text-sm border rounded px-2 py-1\"\n          readOnly \n        />\n      </div>\n    </div>\n  </div>\n);\n\nconst extendedPanelConfig = {\n  pageConfigPanelTabsContent: {\n    layers: { title: \"Layers\", content: defaultConfigTabsContent().layers.content },\n    appearance: { title: \"Theme\", content: <CustomAppearancePanel /> },\n    data: { title: \"Data\", content: <CustomDataPanel /> },\n    settings: { title: \"Settings\", content: <CustomSettingsPanel /> }\n  }\n};\n```"
      },
      {
        "id": "custom-navigation-bar",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "## Custom Navigation Bar\n\nReplace the default navigation bar with your own custom implementation using the `navBar` prop:\n\n### Simple Custom Navigation\n\nCreate a minimal navigation bar with essential functionality:\n\n```tsx\nimport { useState } from 'react';\nimport { Home, Code, Eye } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useLayerStore } from '@/lib/ui-builder/store/layer-store';\nimport { useEditorStore } from '@/lib/ui-builder/store/editor-store';\nimport LayerRenderer from '@/components/ui/ui-builder/layer-renderer';\n\nconst SimpleNav = () => {\n  const [showCodeDialog, setShowCodeDialog] = useState(false);\n  const [showPreviewDialog, setShowPreviewDialog] = useState(false);\n  \n  const selectedPageId = useLayerStore((state) => state.selectedPageId);\n  const findLayerById = useLayerStore((state) => state.findLayerById);\n  const componentRegistry = useEditorStore((state) => state.registry);\n  \n  const page = findLayerById(selectedPageId);\n\n  return (\n    <>\n      <div className=\"flex items-center justify-between bg-slate-50 px-4 py-2 border-b border-slate-200\">\n        <div className=\"flex items-center gap-2\">\n          <Home className=\"h-5 w-5 text-slate-600\" />\n          <span className=\"text-sm font-medium text-slate-800\">UI Builder</span>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"h-8 px-2 text-xs\"\n            onClick={() => setShowCodeDialog(true)}\n          >\n            <Code className=\"h-3 w-3 mr-1\" />\n            Code\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            className=\"h-8 px-2 text-xs\"\n            onClick={() => setShowPreviewDialog(true)}\n          >\n            <Eye className=\"h-3 w-3 mr-1\" />\n            Preview\n          </Button>\n        </div>\n      </div>\n\n      {/* Simple Code Dialog */}\n      {showCodeDialog && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\">\n          <div className=\"bg-white rounded-lg p-6 max-w-2xl max-h-[80vh] overflow-auto\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"text-lg font-semibold\">Generated Code</h2>\n              <Button variant=\"ghost\" size=\"sm\" onClick={() => setShowCodeDialog(false)}>\n                Ã—\n              </Button>\n            </div>\n            <div className=\"text-sm bg-gray-100 p-4 rounded overflow-auto\">\n              <pre>{`// Code export functionality would go here`}</pre>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Simple Preview Dialog */}\n      {showPreviewDialog && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\">\n          <div className=\"bg-white rounded-lg p-6 max-w-4xl max-h-[80vh] overflow-auto\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"text-lg font-semibold\">Page Preview</h2>\n              <Button variant=\"ghost\" size=\"sm\" onClick={() => setShowPreviewDialog(false)}>\n                Ã—\n              </Button>\n            </div>\n            <div className=\"border rounded-lg p-4\">\n              {page && (\n                <LayerRenderer\n                  className=\"w-full\"\n                  page={page}\n                  componentRegistry={componentRegistry}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\n// Use the custom navigation\nconst customNavConfig = {\n  navBar: <SimpleNav />,\n  pageConfigPanelTabsContent: {\n    layers: { title: \"Layers\", content: defaultConfigTabsContent().layers.content },\n    appearance: { title: \"Appearance\", content: defaultConfigTabsContent().appearance?.content },\n    data: { title: \"Data\", content: defaultConfigTabsContent().data?.content }\n  }\n};\n\n<UIBuilder \n  componentRegistry={myRegistry}\n  panelConfig={customNavConfig}\n/>\n```\n\n### Advanced Custom Navigation\n\nBuild a more sophisticated navigation with additional features:\n\n```tsx\nconst AdvancedNav = () => {\n  const { pages, selectedPageId, selectPage, addPageLayer } = useLayerStore();\n  const { previewMode, setPreviewMode } = useEditorStore();\n  const [isPublishing, setIsPublishing] = useState(false);\n  \n  const selectedPage = pages.find(page => page.id === selectedPageId);\n\n  const handlePublish = async () => {\n    setIsPublishing(true);\n    try {\n      // Your publish logic here\n      await publishPage(selectedPage);\n    } finally {\n      setIsPublishing(false);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-between bg-white px-6 py-3 border-b shadow-sm\">\n      {/* Left Section - Branding & Page Selector */}\n      <div className=\"flex items-center gap-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n            <span className=\"text-white text-sm font-bold\">UB</span>\n          </div>\n          <h1 className=\"font-semibold text-lg\">UI Builder Pro</h1>\n        </div>\n        \n        <div className=\"h-6 w-px bg-gray-300\" />\n        \n        <select \n          value={selectedPageId}\n          onChange={(e) => selectPage(e.target.value)}\n          className=\"border border-gray-300 rounded px-3 py-1 text-sm\"\n        >\n          {pages.map(page => (\n            <option key={page.id} value={page.id}>\n              {page.name}\n            </option>\n          ))}\n        </select>\n        \n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => addPageLayer('New Page')}\n        >\n          <PlusIcon className=\"h-4 w-4 mr-1\" />\n          New Page\n        </Button>\n      </div>\n\n      {/* Center Section - Preview Mode Toggle */}\n      <div className=\"flex items-center gap-2\">\n        <span className=\"text-sm text-gray-600\">Preview:</span>\n        <select \n          value={previewMode}\n          onChange={(e) => setPreviewMode(e.target.value)}\n          className=\"border border-gray-300 rounded px-2 py-1 text-sm\"\n        >\n          <option value=\"desktop\">Desktop</option>\n          <option value=\"tablet\">Tablet</option>\n          <option value=\"mobile\">Mobile</option>\n          <option value=\"responsive\">Responsive</option>\n        </select>\n      </div>\n\n      {/* Right Section - Actions */}\n      <div className=\"flex items-center gap-2\">\n        <Button variant=\"outline\" size=\"sm\">\n          <SaveIcon className=\"h-4 w-4 mr-1\" />\n          Save Draft\n        </Button>\n        \n        <Button variant=\"outline\" size=\"sm\">\n          <EyeIcon className=\"h-4 w-4 mr-1\" />\n          Preview\n        </Button>\n        \n        <Button \n          variant=\"default\" \n          size=\"sm\"\n          onClick={handlePublish}\n          disabled={isPublishing}\n        >\n          {isPublishing ? (\n            <Spinner className=\"h-4 w-4 mr-1\" />\n          ) : (\n            <RocketIcon className=\"h-4 w-4 mr-1\" />\n          )}\n          {isPublishing ? 'Publishing...' : 'Publish'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n```\n"
      },
      {
        "id": "panel-config-api",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "## PanelConfig API Reference\n\n### Type Definition\n\n```tsx\ninterface PanelConfig {\n  pageConfigPanelTabsContent?: TabsContentConfig;\n  navBar?: React.ReactNode;\n  editorPanel?: React.ReactNode;\n  propsPanel?: React.ReactNode;\n}\n\ninterface TabsContentConfig {\n  layers: { title: string; content: React.ReactNode };\n  appearance?: { title: string; content: React.ReactNode };\n  data?: { title: string; content: React.ReactNode };\n  [key: string]: { title: string; content: React.ReactNode } | undefined;\n}\n```\n\n### Configuration Options\n\n#### `pageConfigPanelTabsContent`\nCustomizes the left panel tabs:\n\n- **Required**: `layers` - The component tree and page management tab\n- **Optional**: `appearance` - Theme and styling controls tab  \n- **Optional**: `data` - Variable management tab\n- **Custom tabs**: Add your own tabs with any string key\n\n```tsx\n// Example with all options\nconst fullPanelConfig = {\n  pageConfigPanelTabsContent: {\n    layers: { title: \"Structure\", content: <LayersPanel /> },\n    appearance: { title: \"Design\", content: <CustomAppearancePanel /> },\n    data: { title: \"Variables\", content: <CustomDataPanel /> },\n    settings: { title: \"Settings\", content: <SettingsPanel /> },\n    integrations: { title: \"APIs\", content: <IntegrationsPanel /> }\n  }\n};\n```\n\n#### `navBar`\nCustomize the top navigation bar with your own React component:\n\n```tsx\nconst customNavBar = (\n  <div className=\"flex items-center justify-between p-4 bg-white border-b\">\n    <div className=\"flex items-center gap-4\">\n      <Logo />\n      <h1>My Custom Editor</h1>\n    </div>\n    <div className=\"flex items-center gap-2\">\n      <Button variant=\"outline\">Preview</Button>\n      <Button>Publish</Button>\n    </div>\n  </div>\n);\n\nconst panelConfig = {\n  navBar: customNavBar\n};\n```\n\n"
      },
      {
        "id": "use-cases",
        "type": "Markdown",
        "name": "Markdown",
        "props": {},
        "children": "## Common Use Cases\n\n### White-Label Applications\n\nCustomize the interface to match your brand:\n\n```tsx\nconst brandedPanelConfig = {\n  pageConfigPanelTabsContent: {\n    layers: { \n      title: \"Components\", \n      content: defaultConfigTabsContent().layers.content \n    },\n    appearance: { \n      title: \"Brand Kit\", \n      content: <BrandKitPanel /> \n    },\n    data: { \n      title: \"Content\", \n      content: <ContentManagementPanel /> \n    }\n  }\n};\n```\n\n### Specialized Workflows\n\nTailor the interface for specific use cases:\n\n```tsx\n// Email template builder\nconst emailBuilderConfig = {\n  pageConfigPanelTabsContent: {\n    layers: { title: \"Blocks\", content: defaultConfigTabsContent().layers.content },\n    appearance: { title: \"Styling\", content: <EmailStylePanel /> },\n    data: { title: \"Merge Tags\", content: <MergeTagsPanel /> },\n    preview: { title: \"Preview\", content: <EmailPreviewPanel /> }\n  }\n};\n\n// Landing page builder\nconst landingPageConfig = {\n  pageConfigPanelTabsContent: {\n    layers: { title: \"Sections\", content: defaultConfigTabsContent().layers.content },\n    appearance: { title: \"Theme\", content: <ThemePanel /> },\n    data: { title: \"A/B Tests\", content: <ABTestPanel /> },\n    analytics: { title: \"Analytics\", content: <AnalyticsPanel /> }\n  }\n};\n```\n\n### Simplified Interfaces\n\nHide complexity for non-technical users:\n\n```tsx\n// Content editor - no technical options\nconst contentEditorConfig = {\n  pageConfigPanelTabsContent: {\n    layers: { title: \"Content\", content: defaultConfigTabsContent().layers.content }\n    // Hide appearance and data tabs\n  }\n};\n\n// Designer interface - focus on visual\nconst designerConfig = {\n  pageConfigPanelTabsContent: {\n    layers: { title: \"Layers\", content: defaultConfigTabsContent().layers.content },\n    appearance: { title: \"Design\", content: <AdvancedDesignPanel /> }\n    // Hide data/variables tab\n  }\n};\n```\n\n### Integration with External Tools\n\nConnect with your existing systems:\n\n```tsx\nconst integratedConfig = {\n  pageConfigPanelTabsContent: {\n    layers: { title: \"Structure\", content: defaultConfigTabsContent().layers.content },\n    appearance: { title: \"Styling\", content: defaultConfigTabsContent().appearance?.content },\n    data: { title: \"Data\", content: defaultConfigTabsContent().data?.content },\n    cms: { title: \"CMS\", content: <CMSIntegrationPanel /> },\n    assets: { title: \"Assets\", content: <AssetManagerPanel /> }\n  }\n};\n```"
      }
    ]
  } as const satisfies ComponentLayer; 